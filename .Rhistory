library(kableExtra)
n  = 1000
p  = 0.75
x1 = 752
x2 = 775
fx <- tibble(fx_1 <- dbinom(x1,n,p),
fx_2 <- dbinom(x2,n,p))
kable(fx,
align       = "cc",
digits      = 3,
caption     = "Binomial PMF",
col.names   = c("P(X = 752)",
"P(X = 775)")) %>%
kable_styling(font_size = 14)
rm(list = ls())
library(dplyr)
library(kableExtra)
c <- 0.25
n <- 100
p <- 0.45
mu = 50
d  = 0.8
q_est <- tibble(q_binom <- qbinom(c, n, p),
p_binom <- pbinom(q_binom, n, p),
q_poisson <- qpois(d, mu),
p_poisson <- ppois(q_poisson, mu))
kable(q_est,
align       = "cccccc",
caption     = "Inverse CDF",
col.names   = c("q",
"Inverse CDF(q)",
"CDF(x)",
"q",
"Inverse CDF(q)",
"CDF(x)")) %>%
kable_styling(font_size = 14)
options(htmltools.dir.version = FALSE)
library(dplyr)
library(kableExtra)
library(ggplot2)
c <- 0.25
n <- 100
p <- 0.45
q_binom <- qbinom(c, n, p)
p_binom <- pbinom(q_binom, n, p)
mu = 50
d  = 0.8
q_poisson <- qpois(d, mu)
p_poisson <- ppois(q_poisson, mu)
q_est <- data.frame(c,q_binom, p_binom,
d,q_poisson, p_poisson)
kable(q_est,
align       = "cccccc",
caption     = "Inverse CDF",
col.names   = c("q",
"Inverse CDF(q)",
"CDF(x)",
"q",
"Inverse CDF(q)",
"CDF(x)")) %>%
kable_styling(font_size = 14)
rm(list = ls())
library(dplyr)
library(kableExtra)
c <- 0.25
n <- 100
p <- 0.45
mu = 50
d  = 0.8
q_est <- tibble(q_b = c,
q_binom <- qbinom(c, n, p),
p_binom <- pbinom(q_binom, n, p),
q_p = d,
q_poisson <- qpois(d, mu),
p_poisson <- ppois(q_poisson, mu))
kable(q_est,
align       = "cccccc",
caption     = "Inverse CDF",
col.names   = c("q",
"Inverse CDF(q)",
"CDF(x)",
"q",
"Inverse CDF(q)",
"CDF(x)")) %>%
kable_styling(font_size = 14)
rm(list = ls())
library(dplyr)
library(kableExtra)
n <- 10
x <- 3
p <- 0.3
x_1 <- 4
cdf_x1_d <- dbinom(0,10,0.3) + dbinom(1,10,0.3) +
dbinom(2,10,0.3) + dbinom(3,10,0.3) +
dbinom(4,10,0.3)
cdf_x1_p <- pbinom(4,10,0.3,lower.tail = TRUE)
cdf_x1_right <- 1 - pbinom(4,10,0.3,lower.tail = TRUE)
cdf_x1_right2 <- pbinom(4,10,0.3,lower.tail = FALSE)
cdf <- data.frame(cdf_x1_d, cdf_x1_p,
cdf_x1_right, cdf_x1_right2)
kable(cdf,
align       = "cccc",
caption     = "Binomial CDF",
col.names   = c("P(X <= 4)",
"P(X <= 4)",
"P(X > 4)",
"P(X > 4)")) %>%
kable_styling(font_size = 14)
rm(list = ls())
library(dplyr)
library(kableExtra)
n <- 10
x <- 3
p <- 0.3
x_1 <- 4
cdf <- tibble(cdf_x1_d <- dbinom(0,10,0.3) + dbinom(1,10,0.3) +
dbinom(2,10,0.3) + dbinom(3,10,0.3) +
dbinom(4,10,0.3),
cdf_x1_p <- pbinom(4,10,0.3,lower.tail = TRUE),
cdf_x1_right <- 1 - pbinom(4,10,0.3,lower.tail = TRUE),
cdf_x1_right2 <- pbinom(4,10,0.3,lower.tail = FALSE))
kable(cdf,
align       = "cccc",
caption     = "Binomial CDF",
col.names   = c("P(X <= 4)",
"P(X <= 4)",
"P(X > 4)",
"P(X > 4)")) %>%
kable_styling(font_size = 14)
rm(list = ls())
library(dplyr)
library(kableExtra)
c <- 0.25
n <- 100
p <- 0.45
mu = 50
d  = 0.8
q_est <- tibble(q_b = c,
q_binom <- qbinom(c, n, p),
p_binom <- pbinom(q_binom, n, p),
q_p = d,
q_poisson <- qpois(d, mu),
p_poisson <- ppois(q_poisson, mu))
kable(q_est,
align       = "cccccc",
caption     = "Inverse CDF",
col.names   = c("q",
"Inverse CDF(q)",
"CDF(x)",
"q",
"Inverse CDF(q)",
"CDF(x)")) %>%
kable_styling(font_size = 14)
#set the number of observations (experiments) to 5
r_binom <- rbinom(5,100,0.5)
r_poisson <- rpois(5, 10)
r_norm <- rnorm(5, 10, 2)
r_dist <- data.frame(r_binom, r_poisson, r_norm)
kable(r_dist,
align       = "ccc",
caption     = "Random Numbers",
col.names   = c("Binomal",
"Poisson",
"Normal")) %>%
kable_styling(font_size = 14)
quarto::quarto_render()
library(dplyr, quietly = TRUE)
library(ggplot2, quietly = TRUE)
library(kableExtra, quietly = TRUE)
library(tidyquant, quietly = TRUE)
rm(list = ls())
library(dplry)
rm(list = ls())
library(dplyr)
library(kableExtra)
n = 50
p = .8
x = 42
probs <- tibble(p_1 <- dbinom(x, n, p),
p_2 <- pbinom(x, n, p),
p_3 <- pbinom(x, n, p, lower.tail = FALSE))
rm(list = ls())
library(dplyr)
library(kableExtra)
n = 50
p = .8
x = 42
probs <- tibble(p_1 <- dbinom(x, n, p),
p_2 <- pbinom(x, n, p),
p_3 <- pbinom(x, n, p, lower.tail = FALSE))
kable(probs,
align = 'c',
digits = 3,
col.names = c('P(X = 42)', 'P(X <= 42)', 'P(X > 42')) %>%
kable_classic()
rm(list = ls())
library(dplyr)
library(kableExtra)
n = 50
p = .8
x = 42
probs <- tibble(p_1 <- dbinom(x, n, p),
p_2 <- pbinom(x, n, p),
p_3 <- pbinom(x, n, p, lower.tail = FALSE))
kable(probs,
align = 'c',
digits = 3,
col.names = c('P(X = 42)', 'P(X <= 42)', 'P(X > 42)')) %>%
kable_classic()
quarto::quarto_render()
library(dplyr, quietly = TRUE)
library(ggplot2, quietly = TRUE)
library(kableExtra, quietly = TRUE)
library(tidyquant, quietly = TRUE)
uni_graph <- tibble(x  = seq(0,40, by = 0.01),
fx = dunif(x, min = 10, max = 30))
ggplot(uni_graph,
aes(x = x,
y = fx)) +
geom_line() +
theme_minimal() +
labs(x = "x",
y = "f(x)")
a = 10
b = 30
c = 15
d = 20
d_uni_man <- 1/(b-a)
d_uni_calc <- dunif(c, min = a, max = b)
d_uni_man_range <- (d-c)/(b-a)
d_uni_calc_range <- (d-c)*dunif(20, min = a, max = b)
p_uni_man <- (d-a)/(b-a)
p_uni_calc <- punif(d, min = a, max = b)
uni_frame <- data.frame(d_uni_calc, d_uni_calc_range,
p_uni_calc)
kable(uni_frame,
align       = "ccc",
format.args = list(big.mark = ",",
scientific = FALSE),
caption     = "Continuous Uniform Distribution
a=10 and b=30",
col.names   = c("f(x)", "P(15 < x < 20)",
"P(X < 20)")) %>%
kable_styling(font_size = 12)
x <- 1:100
a = 30
b = 70
p = 0.10
uni_frame <- tibble(inv_cdf <- qunif(p, min = a, max = b, lower.tail = TRUE),
cdf <- punif(inv_cdf, min = a, max = b, lower.tail = TRUE))
uni_frame <- data.frame(inv_cdf, cdf)
x <- 1:100
a = 30
b = 70
p = 0.10
uni_frame <- tibble(inv_cdf <- qunif(p, min = a, max = b, lower.tail = TRUE),
cdf <- punif(inv_cdf, min = a, max = b, lower.tail = TRUE))
kable(uni_frame,
align       = "cc",
caption     = "Inverse CDF and CDF",
col.names   = c("Inverse CDF(p=0.1)", "CDF(X < 34)")) %>%
kable_styling(font_size = 12)
a = 30
b = 70
uni_list <- list()
for(i in 1:3){
temp <- runif(5, min = a, max = b)
uni_list[[i]] <- temp
}
ran_unif <- bind_cols(uni_list)
kable(ran_unif,
align     = "ccc",
caption   = " Uniform Random Observations",
col.names = c("1", "2", "3")) %>%
kable_styling(font_size = 12)
quarto::quarto_render()
quarto::quarto_render()
quarto::quarto_render()
quarto::quarto_render()
quarto::quarto_render()
library(dplyr, quietly = TRUE)
library(ggplot2, quietly = TRUE)
library(kableExtra, quietly = TRUE)
library(tidyquant, quietly = TRUE)
a = 10
b = 30
c = 15
d = 20
uni_frame <- tibble(d_uni_man <- 1/(b-a),
d_uni_calc <- dunif(c, min = a, max = b),
d_uni_man_range <- (d-c)/(b-a),
d_uni_calc_range <- (d-c)*dunif(20, min = a, max = b),
p_uni_man <- (d-a)/(b-a),
p_uni_calc <- punif(d, min = a, max = b))
kable(uni_frame,
align       = "ccc",
format.args = list(big.mark = ",",
scientific = FALSE),
caption     = "Continuous Uniform Distribution
a=10 and b=30",
col.names   = c("f(x)", "P(15 < x < 20)",
"P(X < 20)"))
kable(uni_frame,
align       = 'c',
digits      = 4,
caption     = 'Continuous Uniform Distribution
a=10 and b=30',
col.names   = c('Manual',
'Uniform(10,30)',
'Manual P(15 <= X <= 20)',
'P(15 <= X <= 20)',
'P(15 <= X <= 20)',
'P(15 <= X <= 20)'))
a = 10
b = 30
c = 15
d = 20
uni_frame <- tibble(d_uni_man <- 1/(b-a),
d_uni_calc <- dunif(c, min = a, max = b),
d_uni_man_range <- (d-c)/(b-a),
d_uni_calc_range <- (d-c)*dunif(20, min = a, max = b),
p_uni_man <- (d-a)/(b-a),
p_uni_calc <- punif(d, min = a, max = b))
kable(uni_frame,
align       = 'c',
digits      = 4,
caption     = 'Continuous Uniform Distribution
a=10 and b=30',
col.names   = c('Manual',
'Uniform(10,30)',
'Manual P(15 <= X <= 20)',
'P(15 <= X <= 20)',
'Manual P(X < 20)',
'P(X < 20)'))
1/20
a = 10
b = 30
c = 15
d = 20
uni_frame <- tibble(d_uni_man <- 1/(b-a),
d_uni_calc <- dunif(c, min = a, max = b),
d_uni_man_range <- (d-c)/(b-a),
d_uni_calc_range <- punif(20, min = a, max = b) - punif(15, min = 2, max = b),
p_uni_man <- (d-a)/(b-a),
p_uni_calc <- punif(d, min = a, max = b))
kable(uni_frame,
align       = 'c',
digits      = 4,
caption     = 'Continuous Uniform Distribution
a=10 and b=30',
col.names   = c('Manual',
'Uniform(10,30)',
'Manual P(15 <= X <= 20)',
'P(15 <= X <= 20)',
'Manual P(X < 20)',
'P(X < 20)'))
a = 10
b = 30
c = 15
d = 20
uni_frame <- tibble(d_uni_man <- 1/(b-a),
d_uni_calc <- dunif(c, min = a, max = b),
d_uni_man_range <- (d-c)/(b-a),
d_uni_calc_range <- punif(20, min = a, max = b) - punif(15, min = a, max = b),
p_uni_man <- (d-a)/(b-a),
p_uni_calc <- punif(d, min = a, max = b))
kable(uni_frame,
align       = 'c',
digits      = 4,
caption     = 'Continuous Uniform Distribution
a=10 and b=30',
col.names   = c('Manual',
'Uniform(10,30)',
'Manual P(15 <= X <= 20)',
'P(15 <= X <= 20)',
'Manual P(X < 20)',
'P(X < 20)'))
a = 10
b = 30
c = 15
d = 20
uni_frame <- tibble(d_uni_man <- 1/(b-a),
d_uni_calc <- dunif(c, min = a, max = b),
d_uni_man_range <- (d-c)/(b-a),
d_uni_calc_range <- punif(20, min = a, max = b) -
punif(15, min = a, max = b),
p_uni_man <- (d-a)/(b-a),
p_uni_calc <- punif(d, min = a, max = b))
kable(uni_frame,
align       = 'c',
digits      = 4,
caption     = 'Continuous Uniform Distribution
a=10 and b=30',
col.names   = c('Manual',
'Uniform(10,30)',
'Manual P(15 <= X <= 20)',
'P(15 <= X <= 20)',
'Manual P(X < 20)',
'P(X < 20)'))
rm(list = ls())
library(tidyverse)
library(kableExtra)
a <- 30
b <- 70
# Generate 3 columns of 5 uniform random observations
ran_unif <- tibble(replicate(3, runif(5, min = a, max = b)))
kable(ran_unif,
align     = "ccc",
caption   = "Uniform Random Observations",
col.names = c("1", "2", "3")) %>%
kable_styling(font_size = 12)
View(ran_unif)
rm(list = ls())
library(tidyverse)
library(kableExtra)
a <- 30
b <- 70
# Generate 3 columns of 5 uniform random observations
ran_unif <- tibble(replicate(3, runif(5, min = a, max = b)))
kable(ran_unif,
align     = "ccc",
caption   = "Uniform Random Observations",
col.names = c("1", "2", "3")) %>%
kable_styling(font_size = 12)
rm(list = ls())
library(tidyverse)
library(kableExtra)
a <- 30
b <- 70
# Generate 3 columns of 5 uniform random observations
ran_unif <- tibble(replicate(3, runif(5, min = a, max = b)))
kable(ran_unif,
align     = "c",
caption   = "Uniform Random Observations",
col.names = c("Sample 1", "Sample 2", "Sample 3")) %>%
kable_styling(font_size = 12)
rm(list = ls())
library(tidyverse)
library(kableExtra)
a <- 30
b <- 70
# Generate 3 columns of 5 uniform random observations
ran_unif <- as_tibble(
replicate(3, runif(5, min = a, max = b)),
.name_repair = ~ paste0("Sample_", seq_along(.))) %>%
mutate(Observation = paste0("Obs_", row_number())) %>%
relocate(Observation)
kable(ran_unif,
align     = "c",
caption   = "Uniform Random Observations",
col.names = c("Observation", "Sample 1", "Sample 2", "Sample 3")) %>%
kable_styling(font_size = 12)
rm(list = ls())
library(tidyverse)
library(kableExtra)
a <- 30
b <- 70
# Generate 3 columns of 5 uniform random observations
ran_unif <- as_tibble(
replicate(3, runif(5, min = a, max = b)),
.name_repair = ~ paste0("Sample_", seq_along(.))) %>%
mutate(Observation = paste0("Observation_", row_number())) %>%
relocate(Observation)
kable(ran_unif,
align     = "c",
caption   = "Uniform Random Observations",
col.names = c("Observation", "Sample 1", "Sample 2", "Sample 3")) %>%
kable_styling(font_size = 12)
rm(list = ls())
a = 10
b = 30
c = 15
d = 20
uni_frame <- tibble(d_uni_man <- 1/(b-a),
d_uni_calc <- dunif(c, min = a, max = b),
d_uni_man_range <- (d-c)/(b-a),
d_uni_calc_range <- punif(20, min = a, max = b) -
punif(15, min = a, max = b),
p_uni_man <- (d-a)/(b-a),
p_uni_calc <- punif(d, min = a, max = b))
kable(uni_frame,
align       = 'c',
digits      = 4,
caption     = 'Continuous Uniform Distribution
a=10 and b=30',
col.names   = c('Manual',
'Uniform(10,30)',
'Manual P(15 <= X <= 20)',
'P(15 <= X <= 20)',
'Manual P(X < 20)',
'P(X < 20)')) %>%
kable_classic()
library(dplyr, quietly = TRUE)
library(ggplot2, quietly = TRUE)
library(kableExtra, quietly = TRUE)
library(tidyquant, quietly = TRUE)
rm(list = ls())
set.seed(2525)
df_norm <- data.frame(x = rnorm(600, mean = 500, sd = 100))
ggplot(data = df_norm,
aes(x),
size  = 1.2) +
geom_density(linewidth = 1.2,
color = "dark blue") +
stat_function(fun  = dnorm,
args  = list(mean = 500, sd = 100),
linewidth  = 1.2,
color = "red") +
theme_minimal() +
labs(x = "x",
y = "Density")
quarto::quarto_render()
