# Create a histogram of x
hist(x)
hist(y)
View(x_stats)
rm(list = ls())
#Use moments package for skewness
library(moments)
# Define data vectors
x <- c(4, 5, 6, 6, 6, 7, 7, 7, 7, 7, 7, 8, 8, 8, 9,10)
y <- c(4, 5, 6, 6, 6, 7, 7, 7, 7, 8)
x_stats <- tibble(mean   = mean(x),
median = median(x),
skew   = skewness(x))
y_stats <- tibble(mean   = mean(y),
median = median(y),
skew   = skewness(y))
# Create a histogram of x
hist(x)
hist(y)
View(y_stats)
rm(list = ls())
#Use moments package for skewness
library(moments)
# Define data vectors
x <- c(4, 5, 6, 6, 6, 7, 7, 7, 7, 7, 7, 8, 8, 8, 9, 10)
y <- c(4, 5, 6, 6, 6, 7, 7, 7, 7, 8)
z <- c(5, 6, 6, 6, 7, 7, 7, 7, 7, 8, 8, 8, 9, 10)
x_stats <- tibble(mean   = mean(x),
median = median(x),
skew   = skewness(x))
y_stats <- tibble(mean   = mean(y),
median = median(y),
skew   = skewness(y))
z_stats <- tibble(mean   = mean(z),
median = median(z),
skew   = skewness(z))
# Create a histogram of x
hist(x)
hist(y)
View(z_stats)
View(x_stats)
stats <- rbind(x_stats, y_stats, z_stats)
View(stats)
x_stats <- tibble(mean   = mean(x),
median = median(x),
skew   = skewness(x),
row.names('X Stats'))
View(x_stats)
stats <- rbind(x_stats, y_stats, z_stats, .id = 'source_df')
View(stats)
rm(list = ls())
#Use moments package for skewness
library(dplyr)
library(kableExtra)
library(moments)
# Define data vectors
x <- c(4, 5, 6, 6, 6, 7, 7, 7, 7, 7, 7, 8, 8, 8, 9, 10)
y <- c(4, 5, 6, 6, 6, 7, 7, 7, 7, 8)
z <- c(5, 6, 6, 6, 7, 7, 7, 7, 7, 8, 8, 8, 9, 10)
x_stats <- tibble(mean   = mean(x),
median = median(x),
skew   = skewness(x),
row.names('X Stats'))
y_stats <- tibble(mean   = mean(y),
median = median(y),
skew   = skewness(y))
z_stats <- tibble(mean   = mean(z),
median = median(z),
skew   = skewness(z))
stats <- rbind(x_stats, y_stats, z_stats, .id = 'source_df')
View(stats)
x_stats <- tibble(mean   = mean(x),
median = median(x),
skew   = skewness(x),
row.names(c('X Stats')))
View(x_stats)
x_stats <- tibble(name = 'X-Stats',
mean   = mean(x),
median = median(x),
skew   = skewness(x))
View(x_stats)
rm(list = ls())
#Use moments package for skewness
library(dplyr)
library(kableExtra)
library(moments)
# Define data vectors
x <- c(4, 5, 6, 6, 6, 7, 7, 7, 7, 7, 7, 8, 8, 8, 9, 10)
y <- c(4, 5, 6, 6, 6, 7, 7, 7, 7, 8)
z <- c(5, 6, 6, 6, 7, 7, 7, 7, 7, 8, 8, 8, 9, 10)
x_stats <- tibble(name = 'X-Stats',
mean   = mean(x),
median = median(x),
skew   = skewness(x))
y_stats <- tibble(name = 'Y-Stats',
mean   = mean(y),
median = median(y),
skew   = skewness(y))
z_stats <- tibble(name = 'Z-Stats',
mean   = mean(z),
median = median(z),
skew   = skewness(z))
stats <- rbind(x_stats, y_stats, z_stats)
View(stats)
rm(list = ls())
#Use moments package for skewness
library(dplyr)
library(kableExtra)
library(moments)
# Define data vectors
x <- c(4, 5, 6, 6, 6, 7, 7, 7, 7, 7, 7, 8, 8, 8, 9, 10)
y <- c(4, 5, 6, 6, 6, 7, 7, 7, 7, 8)
z <- c(5, 6, 6, 6, 7, 7, 7, 7, 7, 8, 8, 8, 9, 10)
x_stats <- tibble(name = 'X-Stats',
mean   = mean(x),
median = median(x),
skew   = skewness(x))
y_stats <- tibble(name = 'Y-Stats',
mean   = mean(y),
median = median(y),
skew   = skewness(y))
z_stats <- tibble(name = 'Z-Stats',
mean   = mean(z),
median = median(z),
skew   = skewness(z))
stats <- rbind(x_stats, y_stats, z_stats)
kable(stats,
col.names = c('Source','Mean','Median','Skew')) %>%
kable_classic()
kable(stats,
align     = 'c',
digits    = 3,
col.names = c('Source','Mean','Median','Skew')) %>%
kable_classic()
4!
factorial(4)
quarto::quarto_render()
library(dplyr, quietly = TRUE)
library(ggplot2, quietly = TRUE)
library(kableExtra, quietly = TRUE)
library(tidyquant, quietly = TRUE)
rm(list = ls())
library(dplyr)
library(ggplot2)
library(janitor)
library(kableExtra)
library(tidyverse)
#adorn_totals is column by row
freqs <- tabyl(mtcars, cyl, gear) %>%
adorn_totals(c("col", "row"))
kable(freqs,
align       = "lcccc",
format.args = list(big.mark = ",", scientific = FALSE),
caption     = "Cars Frequency Table",
col.names   = c(" ", "3 Gear", "4 Gear", "5 Gear",
"Total")) %>%
kable_styling(font_size = 14)
rel_freqs <- freqs %>%
adorn_percentages("row") %>%
adorn_pct_formatting(digits = 2) %>%
adorn_ns()
kable(rel_freqs,
align       = "lcccc",
format.args = list(big.mark = ",", scientific = FALSE),
caption     = "Cars Frequency Table",
col.names   = c(" ", "3 Gear", "4 Gear", "5 Gear",
"Total")) %>%
kable_styling(font_size = 14)
factorial(10)
factorial(10)/(factorial(5)*factorial(10-5))
combos <- tibble(ex_1 = factorial(3)/(factorial(2)*factorial(3-2)),
ex_2 = factorial(10)/(factorial(5)*factorial(10-5)))
rm(list = ls())
combos <- tibble(ex_1 = factorial(3)/(factorial(2)*factorial(3-2)),
ex_2 = factorial(10)/(factorial(5)*factorial(10-5)))
kable(combos,
align = 'c',
col.names = c('C(3,2)', 'C(10,5)'))
rm(list = ls())
fx <- tibble(combo_x <- factorial(100)/(factorial(92)*factorial(100 - 92)),
fx_calc <- combo_x *0.95^(92)*(1-0.95)^(100-92),
fx_calc2 <- choose(100,92)*(0.95^92)*(1-0.95)^(100-92),
fx_func <- dbinom(92,100,0.95))
kable(fx,
align       = "ccc",
format.args = list(big.mark = ",", scientific = FALSE),
caption     = "P(x=92) with n = 100 and p = 0.95",
col.names   = c("Calculated ",
"Combination Function",
"Binomial Function")) %>%
kable_styling(font_size = 14)
kable(fx,
align       = "cccc",
format.args = list(big.mark = ",", scientific = FALSE),
caption     = "P(x=92) with n = 100 and p = 0.95",
col.names   = c("Calculated ",
"Combination Function",
"Binomial Function")) %>%
kable_styling(font_size = 14)
rm(list = ls())
fx <- tibble(combo_x <- factorial(100)/(factorial(92)*factorial(100 - 92)),
fx_calc <- combo_x *0.95^(92)*(1-0.95)^(100-92),
fx_calc2 <- choose(100,92)*(0.95^92)*(1-0.95)^(100-92),
fx_func <- dbinom(92,100,0.95))
kable(fx,
align       = "cccc",
format.args = list(big.mark = ",", scientific = FALSE),
caption     = "P(x=92) with n = 100 and p = 0.95",
col.names   = c("Combinations",
"Calculated ",
"Combination Function",
"Binomial Function")) %>%
kable_styling(font_size = 14)
rm(list = ls())
fx <- tibble(combo_x <- factorial(100)/(factorial(92)*factorial(100 - 92)),
fx_calc <- combo_x *0.95^(92)*(1-0.95)^(100-92),
fx_calc2 <- choose(100,92)*(0.95^92)*(1-0.95)^(100-92),
fx_func <- dbinom(92,100,0.95))
kable(fx,
align       = "cccc",
digits      = 3,
format.args = list(big.mark = ",", scientific = FALSE),
caption     = "P(x=92) with n = 100 and p = 0.95",
col.names   = c("Combinations",
"Calculated ",
"Combination Function",
"Binomial Function")) %>%
kable_styling(font_size = 14)
rm(list = ls())
n = 100
x = 92
p = 0.95
fx <- tibble(combo_x <- factorial(n)/(factorial(x)*factorial(n - x)),
fx_calc <- combo_x *p^(x)*(1-p)^(n-x),
fx_calc2 <- choose(n,x)*p^(x)*(1-p)^(n-x),
fx_func <- dbinom(x, n, p))
kable(fx,
align       = "cccc",
digits      = 3,
format.args = list(big.mark = ",", scientific = FALSE),
caption     = "P(x=92) with n = 100 and p = 0.95",
col.names   = c("Combinations",
"Calculated ",
"Combination Function",
"Binomial Function")) %>%
kable_styling(font_size = 14)
pbinom(5,10,0.95)
pbinom(5,100,0.95)
pbinom(9,100,0.95)
pbinom(9,10,0.95)
pbinom(8,10,0.95)
pbinom(7,10,0.95)
rm(list = ls())
n = 10
x = 7
p = 0.95
fx <- tibble(pmf <- dbinom(x, n, p),
cdf <- pbinom(x, n, p),
cdf_a <- dbinom(0, 10, 0.95) + dbinom(1, 10, 0.95) +
dbinom(2, 10, 0.95) + dbinom(3, 10, 0.95) +
dbinom(4, 10, 0.95) + dbinom(5, 10, 0.95) +
dbinom(6, 10, 0.95) + dbinom(8, 10, 0.95))
kable(fx,
align       = "cc",
format.args = list(big.mark = ",", scientific = FALSE),
caption     = "N = 10 and p = 0.95",
col.names   = c("PMF(x) ", "CDF(x)")) %>%
kable_styling(font_size = 14,
full_width = TRUE)
View(fx)
fx <- tibble(pmf <- dbinom(x, n, p),
cdf <- pbinom(x, n, p),
cdf_a <- dbinom(0, 10, 0.95) + dbinom(1, 10, 0.95) +
dbinom(2, 10, 0.95) + dbinom(3, 10, 0.95) +
dbinom(4, 10, 0.95) + dbinom(5, 10, 0.95) +
dbinom(6, 10, 0.95) + dbinom(7, 10, 0.95))
View(fx)
rm(list = ls())
n = 10
x = 7
p = 0.95
fx <- tibble(pmf <- dbinom(x, n, p),
cdf <- pbinom(x, n, p),
cdf_a <- dbinom(0, 10, 0.95) + dbinom(1, 10, 0.95) +
dbinom(2, 10, 0.95) + dbinom(3, 10, 0.95) +
dbinom(4, 10, 0.95) + dbinom(5, 10, 0.95) +
dbinom(6, 10, 0.95) + dbinom(7, 10, 0.95))
kable(fx,
align       = "c",
digits      = 3,
caption     = "N = 10 and p = 0.95",
col.names   = c("PMF(X = x) ", "CDF(X <= x)", "CDF( <= x)")) %>%
kable_styling(font_size = 14,
full_width = TRUE)
rm(list = ls())
n = 10
x = 7
p = 0.95
fx <- tibble(pmf <- dbinom(x, n, p),
cdf <- pbinom(x, n, p),
cdf_a <- dbinom(0, 10, 0.95) + dbinom(1, 10, 0.95) +
dbinom(2, 10, 0.95) + dbinom(3, 10, 0.95) +
dbinom(4, 10, 0.95) + dbinom(5, 10, 0.95) +
dbinom(6, 10, 0.95) + dbinom(7, 10, 0.95))
kable(fx,
align       = "c",
digits      = 4,
caption     = "N = 10 and p = 0.95",
col.names   = c("PMF(X = x) ", "CDF(X <= x)", "CDF( <= x)")) %>%
kable_styling(font_size = 14,
full_width = TRUE)
x <- 1:100
lines_1 <- tibble(x, p_x = dbinom(x, size = 100, prob = 0.3),
prob = 0.1)
lines_2 <- tibble(x, p_x = dbinom(x, size = 100, prob = 0.4),
prob = 0.3)
lines_3 <- tibble(x, p_x = dbinom(x, size = 100, prob = 0.5),
prob = 0.5)
lines <- bind_rows(lines_1, lines_2, lines_3)
ggplot(lines,
aes(x     = x,
y     = p_x,
group = prob,
fill  = prob)) +
geom_col() +
facet_wrap(vars(prob)) +
theme_minimal() +
theme(legend.position = " ") +
labs(title = "Binomial Probability Function",
x     = " ",
y     = "P(X = x)")
View(lines)
rm(list = ls())
x <- 1:100
lines_1 <- tibble(x, p_x = dbinom(x, size = 100, prob = 0.3),
prob = 0.1)
lines_2 <- tibble(x, p_x = dbinom(x, size = 100, prob = 0.4),
prob = 0.3)
lines_3 <- tibble(x, p_x = dbinom(x, size = 100, prob = 0.5),
prob = 0.5)
lines <- bind_rows(lines_1, lines_2, lines_3)
ggplot(lines,
aes(x     = x,
y     = p_x,
group = prob,
fill  = prob)) +
geom_col() +
facet_wrap(vars(prob)) +
theme_minimal() +
theme(legend.position = " ") +
labs(title = "Binomial Probability Function",
x     = " ",
y     = "P(X = x)")
rm(list = ls())
x <- 1:100
lines_1 <- tibble(x, p_x = pbinom(x, size = 100, prob = 0.3),
prob = 0.1)
lines_2 <- tibble(x, p_x = pbinom(x, size = 100, prob = 0.4),
prob = 0.3)
lines_3 <- tibble(x, p_x = pbinom(x, size = 100, prob = 0.5),
prob = 0.5)
lines <- bind_rows(lines_1, lines_2, lines_3)
ggplot(lines,
aes(x     = x,
y     = p_x,
group = prob,
fill  = prob)) +
geom_col() +
facet_wrap(vars(prob)) +
theme_minimal() +
theme(legend.position = " ") +
labs(title = "Binomial Probability Mass Function",
x     = " ",
y     = "P(X = x)")
rm(list = ls())
x <- 1:100
lines_1 <- tibble(x, p_x = dbinom(x, size = 100, prob = 0.3),
prob = 0.1)
lines_2 <- tibble(x, p_x = dbinom(x, size = 100, prob = 0.4),
prob = 0.3)
lines_3 <- tibble(x, p_x = dbinom(x, size = 100, prob = 0.5),
prob = 0.5)
lines <- bind_rows(lines_1, lines_2, lines_3)
ggplot(lines,
aes(x     = x,
y     = p_x,
group = prob,
fill  = prob)) +
geom_col() +
facet_wrap(vars(prob)) +
theme_minimal() +
theme(legend.position = " ") +
labs(title = "Binomial Probability Mass Function",
x     = " ",
y     = "P(X = x)")
rm(list = ls())
library(dplyr)
library(kableExtra)
n = 50
x = 23
p = 0.55
fx <- tibble(pmf <- dbinom(x, n, p),
cdf <- pbinom(x, n, p),
ev  <- n*p,
var <- n*p*(1-p),
sd  <- sqrt(n*p*(1-p)))
kable(fx,
align       = "c",
digits      = 4,
caption     = "N = 50, X = 23, and p = 0.55",
col.names   = c("PMF(X = x) ",
"CDF(X <= x)",
"Expected Value",
"Variance",
"Standard Deviation")) %>%
kable_styling(font_size = 14,
full_width = TRUE)
library(dplyr, quietly = TRUE)
library(ggplot2, quietly = TRUE)
library(kableExtra, quietly = TRUE)
library(tidyquant, quietly = TRUE)
# mu_60 = 10 per 60 seconds
# mu_15 = 2.5 per 15 second
poissons <- tibble(p_x0_1min <- ppois(0, 10),
p_x12_1min <- ppois(12, 10),
p_xle3_1min <- ppois(3, 10),
p_x0_15sec <- ppois(0, 2.5),
p_xge1_15sec <- 1-dpois(0, 2.5))
kable(poissons,
align       = "ccccc",
format.args = list(big.mark = ",", scientific = FALSE),
caption     = "Poisson with mu = 10 in 1 Minute",
col.names   = c("P(x=0, 1 min)",
"P(x=12, 1 min)",
"P(x<3, 1 min)",
"P(x=0, 15 sec)",
"P(x>0, 15 sec)")) %>%
kable_styling(font_size = 14)
(10/60)*15
dpois(1, 10)
x <- 1:20
lines_1 <- tibble(x, p_x = dpois(x, 10), mu = 5)
lines_2 <- tibble(x, p_x = dpois(x, 20), mu = 10)
lines_3 <- tibble(x, p_x = dpois(x, 30), mu = 20)
lines <- bind_rows(lines_1, lines_2, lines_3)
ggplot(lines,
aes(x     = x,
y     = p_x,
group = mu,
fill  = mu)) +
geom_col(colour = "black") +
facet_wrap(vars(mu)) +
theme_minimal() +
theme(legend.position = " ") +
labs(title = "Poisson Probability Function",
x     = " ",
y     = "P(X = x)")
x <- 1:20
lines_1 <- tibble(x, p_x = dpois(x, 5), mu = 5)
lines_2 <- tibble(x, p_x = dpois(x, 10), mu = 10)
lines_3 <- tibble(x, p_x = dpois(x, 20), mu = 20)
lines <- bind_rows(lines_1, lines_2, lines_3)
ggplot(lines,
aes(x     = x,
y     = p_x,
group = mu,
fill  = mu)) +
geom_col(colour = "black") +
facet_wrap(vars(mu)) +
theme_minimal() +
theme(legend.position = " ") +
labs(title = "Poisson Probability Function",
x     = " ",
y     = "P(X = x)")
x <- 1:20
lines_1 <- tibble(x, p_x = dpois(x, 5), mu = 5)
lines_2 <- tibble(x, p_x = dpois(x, 10), mu = 10)
lines <- bind_rows(lines_1, lines_2)
ggplot(lines,
aes(x     = x,
y     = p_x,
group = mu,
fill  = mu)) +
geom_col(colour = "black") +
facet_wrap(vars(mu)) +
theme_minimal() +
theme(legend.position = " ") +
labs(title = "Poisson Probability Function",
x     = " ",
y     = "P(X = x)")
x <- 1:20
lines_1 <- tibble(x, p_x = ppois(x, 5), mu = 10)
lines_2 <- tibble(x, p_x = ppois(x, 10), mu = 20)
lines <- bind_rows(lines_1, lines_2)
ggplot(lines,
aes(x     = x,
y     = p_x,
group = mu,
fill  = mu)) +
geom_col(colour = "black") +
facet_wrap(vars(mu)) +
theme_minimal() +
theme(legend.position = " ") +
labs(title = "Cumulative Poisson Probability Function",
x     = " ",
y     = "P(X = x)")
quarto::quarto_render()
quarto::quarto_render()
quarto::quarto_render()
unlink("docs/site_libs", recursive = TRUE, force = TRUE)
quarto render
quarto::quarto_render()
