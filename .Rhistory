x4 <- 0.47
#Create a row vector
x5 <- c(12, 13, 14, 25, 100)
#Transpose x5
x6 <- t(x5)
#Use existing variables to create a row vector
x7 <- c(x1, x2, x3, x4, x5)
# Use kable To Create Tables of X5 and X6
# align = 'c' -> aligns to center
# digits = 0  -> no decimals
# col.names -> sets a name for the column
kable(x5,
align = 'c',
digits = 0,
col.names = c('X5'))
kable(x6,
align = 'c',
col.names = c('A','B','C','D','E'))
kable(x7,
align = 'c',
digits = 0,
col.names = c('X57'))
rm(list = ls())
#Load packages
library(dplyr, quiet = TRUE)
library(kableExtra, quiet = TRUE)
# Assign values to x1, x2, x3, x4
x1 <- 1
x2 <- -5
x3 <- 136
x4 <- 0.47
#Create a row vector
x5 <- c(12, 13, 14, 25, 100)
#Transpose x5
x6 <- t(x5)
#Use existing variables to create a row vector
x7 <- c(x1, x2, x3, x4, x5)
# Use kable To Create Tables of X5 and X6
# align = 'c' -> aligns to center
# digits = 0  -> no decimals
# col.names -> sets a name for the column
kable(x5,
align = 'c',
digits = 0,
col.names = c('X5'))
kable(x6,
align = 'c',
col.names = c('A','B','C','D','E'))
kable(x7,
align = 'c',
digits = 0,
col.names = c('X7'))
#Output x5 * 2
kable(x5*2,
align = 'c',
digits = 2,
col.names = c('X5 * 2'))
kable(x5*2)
#Assign x5*2 to x7
x8 <- x5*2
kable(x7,
align = 'c',
digits = 2,
col.names = c('X7'))
kable(x7,
align = 'c',
digits = 1,
col.names = c('X7'))
kable(x8,
align = 'c',
digits = 1,
col.names = c('X8'))
#Output x5 * 2
kable(x5*2,
align = 'c',
digits = 2,
col.names = c('X5 * 2'))
kable(x5*2)
#Assign x5*2 to x7
x8 <- x5*2
kable(x8,
align = 'c',
digits = 1,
col.names = c('X8'))
rm(list = ls())
#Load packages
library(kableExtra, quiet = TRUE)
# Assign values to x1, x2, x3, x4
x1 <- 1
x2 <- -5
x3 <- 136
x4 <- 0.47
#Create a row vector
x5 <- c(12, 13, 14, 25, 100)
#Transpose x5
x6 <- t(x5)
#Use existing variables to create a row vector
x7 <- c(x1, x2, x3, x4, x5)
# Use kable To Create Tables of X5 and X6
# align = 'c' -> aligns to center
# digits = 0  -> no decimals
# col.names -> sets a name for the column
kable(x5,
align = 'c',
digits = 0,
col.names = c('X5'))
kable(x6,
align = 'c',
col.names = c('A','B','C','D','E'))
kable(x7,
align = 'c',
digits = 0,
col.names = c('X7'))
rm(list = ls())
#Load packages
library(kableExtra, quiet = TRUE)
#Create a vector
x5 <- c(12, 13, 14, 25, 100)
kable(x5*2,
align = 'c',
digits = 2,
col.names = c('X5 * 2'),
caption = 'Table of Variable X5 - Each Element Times 2')
#Assign x5*2 to x8
x8 <- x5*2
kable(x8,
align = 'c',
digits = 1,
col.names = c('X8'),
caption = 'Table of Variable X8')
quarto::quarto_render()
vector_1 <- c(4, 16, 25, 81, 10000)
vector_2 <- sqrt(vector 1)
sqrt(vector_1)
quarto::quarto_render()
quarto::quarto_render()
quarto::quarto_render()
# Preload the packages using webR binaries
webr::install("dplyr")
webr::install_packages(c("dplyr",
"ggplot2",
"kableExtra",
"tidyquant"))
library(dplyr, quietly = TRUE)
library(ggplot2, quietly = TRUE)
library(kableExtra, quietly = TRUE)
library(tidyquant, quietly = TRUE)
quarto::quarto_render()
quarto::quarto_render()
quarto::quarto_render()
quarto::quarto_render()
quarto::quarto_render()
quarto::quarto_render()
rm(list = ls())
#Load packages
library(dplyr, quiet = TRUE)
library(lubridate, quiet = TRUE)
library(tidyverse, quiet = TRUE)
library(kableExtra, quiet = TRUE)
#Assign mtcars to cardata
cardata <- mtcars
# View structure of the data frame
head(cardata)
tail(cardata)
rm(list = ls())
#Load packages
library(dplyr, quiet = TRUE)
library(lubridate, quiet = TRUE)
library(tidyverse, quiet = TRUE)
library(kableExtra, quiet = TRUE)
#Assign mtcars to cardata
cardata <- mtcars
# View structure of the data frame
head(cardata)
tail(cardata)
# First observation, First variable.
cardata[1,1]
# First two observations, 2nd and 3rd variables
cardata[1:2, 2:3]
rm(list = ls())
#Load packages
library(dplyr, quiet = TRUE)
library(lubridate, quiet = TRUE)
library(tidyverse, quiet = TRUE)
library(kableExtra, quiet = TRUE)
#Assign mtcars to cardata
cardata <- mtcars
# View structure of the data frame
head(cardata)
tail(cardata)
rm(list = ls())
#Load packages
library(dplyr)
library(lubridate)
library(tidyverse)
library(kableExtra)
library(tidyquant)
#Use tq_get to obtain real GDP from FRED
rgdp <- tq_get("GDPC1",
get  = "economic.data",
from = "1950-01-01" ) %>%
rename(rgdp = price) %>%
mutate(date = lubridate::ymd(date))
kable(rgdp[1:5,])
kable(rgdp[1:5,]) %>%
kable_classic()
rm(list = ls())
#Load packages
library(dplyr)
library(kableExtra)
library(lubridate)
library(tidyquant)
library(tidyverse)
library(ggplot2)
#Use tq_get to obtain nominal and real GDP from FRED
all_gdp <- tq_get(c("GDP", "GDPC1"),
get  = "economic.data",
from = "1950-01-01") %>%
mutate(date     = lubridate::ymd(date)) %>%
rename(variable = symbol,
value    = price)
# Produce Table of First 10 Observations
kable(all_gdp[1:10,],
col.names = c("Variable",
"Date",
"Value"))
#Use GGPLOT
#GDP over time
ggplot(data = all_gdp,
aes(x = date,
y = value,
color = variable,
group = variable)) +
geom_line(linewidth = 1.5) +
theme_minimal() +
theme(legend.position = 'bottom') +
labs(title    = "Real and Nominal GDP, United States",
subtitle = "Billions of Dollars",
x        = "Date",
y        = "Billions of Dollars")
ggplot(data = all_gdp,
aes(x = date,
y = value,
color = variable,
group = variable)) +
geom_line(linewidth = 1.5) +
theme_minimal() +
theme(legend.position = 'bottom',
legend.title    = '' ) +
labs(title    = "Real and Nominal GDP, United States",
subtitle = "Billions of Dollars",
x        = "Date",
y        = "Billions of Dollars")
ggplot(data = all_gdp,
aes(x = date,
y = value,
color = variable,
group = variable)) +
geom_line(linewidth = 1.5) +
theme_minimal() +
theme(legend.position = 'bottom',
legend.title    = element_blank()) +
labs(title    = "Real and Nominal GDP, United States",
subtitle = "Billions of Dollars",
x        = "Date",
y        = "Billions of Dollars")
ggplot(data = all_gdp,
aes(x = date,
y = value,
color = variable,
group = variable)) +
geom_line(linewidth = 1) +
theme_minimal() +
theme(legend.position = 'bottom',
legend.title    = element_blank()) +
labs(title    = "Real and Nominal GDP, United States",
subtitle = "Billions of Dollars",
x        = "Date",
y        = "Billions of Dollars")
ggplot(data = all_gdp,
aes(x = date,
y = value,
color = variable,
group = variable)) +
scale_y_continuous(labels = scales::dollar()) +
geom_line(linewidth = 1) +
theme_minimal() +
theme(legend.position = 'bottom',
legend.title    = element_blank()) +
labs(title    = "Real and Nominal GDP, United States",
subtitle = "Billions of Dollars",
x        = "Date",
y        = "Billions of Dollars")
ggplot(data = all_gdp,
aes(x = date,
y = value,
color = variable,
group = variable)) +
scale_y_continuous(labels = scales::dollar(value)) +
geom_line(linewidth = 1) +
theme_minimal() +
theme(legend.position = 'bottom',
legend.title    = element_blank()) +
labs(title    = "Real and Nominal GDP, United States",
subtitle = "Billions of Dollars",
x        = "Date",
y        = "Billions of Dollars")
ggplot(data = all_gdp,
aes(x = date,
y = value,
color = variable,
group = variable)) +
scale_y_continuous(labels = scales::dollar(a=1)) +
geom_line(linewidth = 1) +
theme_minimal() +
theme(legend.position = 'bottom',
legend.title    = element_blank()) +
labs(title    = "Real and Nominal GDP, United States",
subtitle = "Billions of Dollars",
x        = "Date",
y        = "Billions of Dollars")
ggplot(data = all_gdp,
aes(x = date,
y = value,
color = variable,
group = variable)) +
scale_y_continuous(labels = scales::comma()) +
geom_line(linewidth = 1) +
theme_minimal() +
theme(legend.position = 'bottom',
legend.title    = element_blank()) +
labs(title    = "Real and Nominal GDP, United States",
subtitle = "Billions of Dollars",
x        = "Date",
y        = "Billions of Dollars")
ggplot(data = all_gdp,
aes(x = date,
y = value,
color = variable,
group = variable)) +
scale_y_continuous(labels = scales::comma()(value)) +
geom_line(linewidth = 1) +
theme_minimal() +
theme(legend.position = 'bottom',
legend.title    = element_blank()) +
labs(title    = "Real and Nominal GDP, United States",
subtitle = "Billions of Dollars",
x        = "Date",
y        = "Billions of Dollars")
ggplot(data = all_gdp,
aes(x = date,
y = value,
color = variable,
group = variable)) +
scale_y_continuous(labels = scales::dollar_format()) +
geom_line(linewidth = 1) +
theme_minimal() +
theme(legend.position = 'bottom',
legend.title    = element_blank()) +
labs(title    = "Real and Nominal GDP, United States",
subtitle = "Billions of Dollars",
x        = "Date",
y        = "Billions of Dollars")
ggplot(data = all_gdp,
aes(x = date,
y = value,
color = variable,
group = variable)) +
geom_line(linewidth = 1) +
scale_y_continuous(labels = scales::dollar_format()) +
theme_minimal() +
theme(legend.position = 'bottom',
legend.title    = element_blank()) +
labs(title    = "Real and Nominal GDP, United States",
subtitle = "Billions of Dollars",
x        = "Date",
y        = "Billions of Dollars")
library(dplyr, quietly = TRUE)
library(ggplot2, quietly = TRUE)
library(kableExtra, quietly = TRUE)
library(lubridate, quietly = TRUE)
library(tidyquant, quietly = TRUE)
# Create x and y variables#
income <- tibble(person = c(1,2,3,4,5),
income  = c(23420,33239,44849,54829,75793),
tenure  = c(8,10,14,17,39))
# Use kable function to produce a table
kable(income,
col.names = c("Individual",
"Income",
"Job Tenure"),
align = c('c','c','c'),
caption = 'Example Data Set')  %>%
kable_styling(full_width = TRUE)
# Create x and y variables#
student <- tibble(person = c(1,2,3,4,5),
name   = c("Bob","Sally","Jim","Tony","Sarah"),
class  = c("Freshman","Sophmore",
"Junior","Freshman","Senior"),
grade  = c(4,3,2,4,1))
# Use kable function to produce a table
kable(student,
col.names = c("Observation",
"Name",
"Grade",
"Numeric Grade"),
align = c('c','c','c','c'),
caption = 'Ordinal Example') %>%
kable_styling(full_width = TRUE)
rm(list = ls())
#kableExtra and dplyr are loaded
#Create X8 as equal to the sequence of numbers from 3 to 6
#Create X9 as equal to the sequence of numbers from 10 to 13
x8 <- 3:6
x9 <- 10:13
df1 <- data.frame(cbind(x8,x9))
df2 <- tibble(cbind(x8, x9))
kable(df1)
kable(df2)
kable(df1)
df2
kable(df2)
df1
df2
kable(df2, caption = "Tibble from dplyr") |>
kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover"))
rm(list = ls())
#kableExtra and dplyr are loaded
#Create X8 as equal to the sequence of numbers from 3 to 6
#Create X9 as equal to the sequence of numbers from 10 to 13
x8 <- 3:6
x9 <- 10:13
df1 <- data.frame(x8,x9)
df2 <- tibble(x8, x9)
kable(df1)
kable(df2)
kable(df1,
align = 'c') %>%
kable_classic()
kable(df2,
align = 'c') %>%
kable_styling()
rm(list = ls())
#Assign mtcars to cardata
cardata <- mtcars
# View structure of the data frame
head(cardata)
tail(cardata)
View(cardata)
library(dplyr)
library(tidyverse)
cardata2 <- cardata %>%
rownames_to_column() %>%
rename(car           = rowname) %>%
mutate(km_per_gallon = mpg*1.60934,
km_per_liter  = km_per_gallon*3.78541,
km2_per_liter = mpg*1.60934*3.78541) %>%
select(car, mpg, cyl, wt, km_per_gallon, km_per_liter, km2_per_liter)
kable(cardata[1:5,])
kable(cardata2[1:5,],
col.names = c("Car",
"MPG",
"Cylinders",
"Weight",
"Kilometers per Gallon",
"Kliometers per Liter",
"Squared KM/Gallon")) %>%
kable_classic()
rm(list = ls())
library(dplyr)
library(tidyverse)
cardata <- mtcars
cardata2 <- cardata %>%
rownames_to_column() %>%
rename(car           = rowname) %>%
mutate(km_per_gallon = mpg*1.60934,
km_per_liter  = km_per_gallon*3.78541,
km2_per_liter = mpg*1.60934*3.78541) %>%
select(car, mpg, cyl, wt, km_per_gallon, km_per_liter, km2_per_liter)
kable(cardata[1:5,])
kable(cardata2[1:5,],
col.names = c("Car",
"MPG",
"Cylinders",
"Weight",
"Kilometers per Gallon",
"Kliometers per Liter",
"Squared KM/Gallon")) %>%
kable_classic()
rm(list = ls())
library(dplyr)
library(kableExtra)
library(tidyverse)
cardata <- mtcars
cardata2 <- cardata %>%
rownames_to_column() %>%
rename(car           = rowname) %>%
mutate(km_per_gallon = mpg*1.60934,
km_per_liter  = km_per_gallon*3.78541,
km2_per_liter = mpg*1.60934*3.78541) %>%
select(car, mpg, cyl, wt, km_per_gallon, km_per_liter, km2_per_liter)
kable(cardata[1:5,])
kable(cardata2[1:5,],
col.names = c("Car",
"MPG",
"Cylinders",
"Weight",
"Kilometers per Gallon",
"Kliometers per Liter",
"Squared KM/Gallon")) %>%
kable_classic()
quarto::quarto_render()
