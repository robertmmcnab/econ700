geom_ribbon(data = df %>% filter(x <= -1.28),
aes(ymax = y), ymin = 0, fill= "red", alpha = 0.5) +
geom_vline(aes(xintercept = -1.28), linetype = 'dashed', linewidth = 1.1) +
theme_minimal() +
labs(x = "Z",
y = "P(Z)",
title = "Standard Normal Distribution",
subtitle = "One Tailed Rejection Region for Alpha = 0.10 is Z <= -1.28")
df <- data.frame(x = seq(-4, 4, length.out = 100)) %>%
mutate(y = dnorm(x))
ggplot(df,
aes(x = x,
y = y)) +
geom_area(fill = 'sky blue') +
geom_ribbon(data = df %>% filter(x <= -1.28),
aes(ymax = y), ymin = 0, fill= "red", alpha = 0.5) +
geom_vline(aes(xintercept = -1.28), linetype = 'dashed', linewidth = 1.1) +
theme_minimal() +
labs(x = "Z",
y = "P(Z)",
title = "Standard Normal Distribution",
subtitle = "One Tailed Rejection Region for Alpha = 0.10 is Z <= -1.28")
df <- data.frame(x = seq(-4, 4, length.out = 100)) %>%
mutate(y = dnorm(x))
ggplot(df,
aes(x = x,
y = y)) +
geom_area(fill = 'sky blue') +
geom_ribbon(data = df %>% filter(x > 1.65),
aes(ymax = y), ymin = 0, fill= "red", alpha = 0.5) +
geom_vline(aes(xintercept = 1.65), linetype = 'dashed', linewidth = 1.1) +
theme_minimal() +
labs(x = "Z",
y = "P(Z)",
title = "Standard Normal Distribution",
subtitle = "One Tailed Rejection Region for Alpha = 0.05 is Z > 1.65")
df <- data.frame(x = seq(-4, 4, length.out = 100)) %>%
mutate(y = dnorm(x))
ggplot(df,
aes(x = x,
y = y)) +
geom_area(fill = 'sky blue') +
geom_ribbon(data = df %>% filter(x >= 1.65),
aes(ymax = y), ymin = 0, fill= "red", alpha = 0.5) +
geom_vline(aes(xintercept = 1.65), linetype = 'dashed', linewidth = 1.1) +
theme_minimal() +
labs(x = "Z",
y = "P(Z)",
title = "Standard Normal Distribution",
subtitle = "One Tailed Rejection Region for Alpha = 0.05 is Z >= 1.65")
rm(list = ls())
qnorm(0.025,0,1)
qnorm(0.975,0,1)
df <- data.frame(x = seq(-3, 3, length.out = 100), by = 0.1) %>%
mutate(y = dnorm(x))
ggplot(df,
aes(x = x,
y = y)) +
geom_area(fill = 'sky blue') +
geom_ribbon(data = subset(df, x <= -1.96), aes(ymax = y),
ymin = 0, fill= "red", alpha = 0.5) +
geom_ribbon(data = subset(df, x >= 1.96), aes(ymax = y),
ymin = 0, fill= "red", alpha = 0.5) +
geom_vline(aes(xintercept = -1.96), linetype = 'dashed') +
geom_vline(aes(xintercept = 1.96), linetype = 'dashed') +
theme_minimal() +
labs(x = "Z",
y = "P(Z)",
title = "Standard Normal - Two Tailed Hypothesis Test",
subtitle = "Alpha = 0.05 and Z <= -1.96 and Z => 1.96")
rm(list = ls())
qnrom(0.05,0,1)
qnorm(0.05,0,1)
rm(list = ls())
prnom(2.12132, 0, 1)
prorm(2.12132, 0, 1)
pnorm(2.12132, 0, 1)
pnorm(-2.12132, 0, 1)
rm(list = ls())
qnorm(0.05,0,1)
rm(list = ls())
xbar = 19.4
mu = 20
n = 50
sigma = 2
z <- (xbar-mu)/(sigma/sqrt(n))
pnorm(z, 0, 1)
rm(list = ls())
xbar = 31.2
mu = 30
sigma = 12.5
n = 90
qnorm(0.90,0,1)
z <- (xbar-mu)/(sigma/sqrt(n))
pnorm(z, 0, 1)
rm(list = ls())
xbar = 31.2
mu = 30
sigma = 12.5
n = 90
df <- tibble(crit_z <- qnorm(0.90,0,1),
z <- (xbar-mu)/(sigma/sqrt(n)),
pnorm(z, 0, 1))
kable(df,
digits = 3,
align = 'c',
col.names = c('Critical Z', 'Estimated Z', 'P(Z <= z)')) %>%
kable_classic()
rm(list = ls())
xbar = 19.4
mu = 20
n = 50
sigma = 2
df <- tibble(crit_z <- qnorm(0.05,0,1),
z <- (xbar-mu)/(sigma/sqrt(n)),
pnorm(z, 0, 1))
kable(df,
digits = 3,
align = 'c',
col.names = c('Critical Z', 'Estimated Z', 'P(Z <= z)')) %>%
kable_classic()
rm(list = ls())
xbar = 19.4
mu = 20
n = 50
sigma = 2
df <- tibble(crit_z <- qnorm(0.05,0,1),
z <- (xbar-mu)/(sigma/sqrt(n)),
pnorm(z, 0, 1))
kable(df,
digits = 3,
align = 'c',
col.names = c('Critical Z', 'Estimated Z', 'P(Z <= z)')) %>%
kable_classic()
rm(list = ls())
xbar = 19.4
mu = 20
n = 50
sigma = 2
df <- tibble(crit_z <- qnorm(0.05,0,1),
z <- (xbar-mu)/(sigma/sqrt(n)),
pnorm(z, 0, 1))
kable(df,
digits = 3,
align = 'c',
col.names = c('Critical Z', 'Estimated Z', 'P(Z <= z)')) %>%
kable_classic()
rm(list = ls())
xbar = 31.2
mu = 30
sigma = 12.5
n = 90
df <- tibble(crit_z <- qnorm(0.90,0,1),
z <- (xbar-mu)/(sigma/sqrt(n)),
pnorm(z, 0, 1))
kable(df,
digits = 3,
align = 'c',
col.names = c('Critical Z', 'Estimated Z', 'P(Z <= z)')) %>%
kable_classic()
rm(list = ls())
xbar = 31.2
mu = 30
sigma = 12.5
n = 90
df <- tibble(crit_z <- qnorm(0.90,0,1),
z <- (xbar-mu)/(sigma/sqrt(n)),
pnorm(z, 0, 1))
kable(df,
digits = 3,
align = 'c',
col.names = c('Critical Z', 'Estimated Z', 'P(Z <= z)')) %>%
kable_classic()
rm(list = ls())
xbar = 19.4
mu = 20
n = 50
sigma = 2
df <- tibble(crit_z <- qnorm(0.05,0,1),
z <- (xbar-mu)/(sigma/sqrt(n)),
pnorm(z, 0, 1))
kable(df,
digits = 3,
align = 'c',
col.names = c('Critical Z', 'Estimated Z', 'P(Z <= z)')) %>%
kable_classic()
rm(list = ls())
xbar = 31.2
mu = 30
sigma = 12.5
n = 90
df <- tibble(crit_z <- qnorm(0.90,0,1),
z <- (xbar-mu)/(sigma/sqrt(n)),
pnorm(z, 0, 1))
kable(df,
digits = 3,
align = 'c',
col.names = c('Critical Z', 'Estimated Z', 'P(Z <= z)')) %>%
kable_classic()
rm(list = ls())
xbar = 31.2
mu = 30
sigma = 12.5
n = 90
df <- tibble(crit_z <- qnorm(0.90,0,1),
z <- (xbar-mu)/(sigma/sqrt(n)),
pnorm(z, 0, 1))
kable(df,
digits = 3,
align = 'c',
col.names = c('Critical Z', 'Estimated Z', 'P(Z <= z)')) %>%
kable_classic()
mu = 127.9
sigma = 8
alpha = 0.05
pressure <- c(110, 132, 138, 98, 122, 190, 92, 105, 104, 148,
83, 193, 132, 114, 192, 183, 100, 99, 111, 123,
130, 194, 141, 138, 98, 94, 97, 128, 105, 108,
193, 85, 80, 132, 134, 148, 192)
xbar = mean(pressure)
z = (mean(pressure) - mu)/(sigma/sqrt(length(pressure)))
z_crit <- qnorm((1-alpha),0,1)
p_z <- 1-pnorm(z,0,1)
test <- data.frame(mu, xbar, alpha, z, z_crit, p_z)
kable(test,
align     = "cccccc",
caption   = "Hypothesis Test",
col.names = c("Hypothesized Mean", "Sample Avg",
"Sig. Level", "Z", "Z(c)",
"1-CDF(Z)")) %>%
kable_styling(font_size = 11)
mu = 127.9
sigma = 8
alpha = 0.05
pressure <- c(110, 132, 138, 98, 122, 190, 92, 105, 104, 148,
83, 193, 132, 114, 192, 183, 100, 99, 111, 123,
130, 194, 141, 138, 98, 94, 97, 128, 105, 108,
193, 85, 80, 132, 134, 148, 192)
xbar = mean(pressure)
z = (mean(pressure) - mu)/(sigma/sqrt(length(pressure)))
z_crit <- qnorm((1-alpha),0,1)
p_z <- 1-pnorm(z,0,1)
test <- data.frame(mu, xbar, alpha, z, z_crit, p_z)
kable(test,
align     = "c",
digits    = 3,
caption   = "Hypothesis Test",
col.names = c("Hypothesized Mean", "Sample Avg",
"Sig. Level", "Z", "Z(c)",
"1-CDF(Z)")) %>%
kable_styling(font_size = 11)
df <- data.frame(x = seq(-5, 5, length.out = 100), by = 0.1) %>%
mutate(y = dt(x, 1))
ggplot(df,
aes(x = x,
y = y,
color = "red")) +
geom_line(size = 1.2) +
stat_function(fun = dnorm,
args = list(mean = 0, sd = 1),
color = "dark blue",
size = 1.2) +
theme_minimal() +
theme(legend.position = "") +
labs(title = "Standard Normal and T-Distribution",
subtitle = "1 Degree of Freedom for T-Distribution",
y = "P(X)",
x = "X")
df <- data.frame(x = seq(-5, 5, length.out = 100), by = 0.1) %>%
mutate(y = dt(x, 1))
ggplot(df,
aes(x = x,
y = y,
color = "red")) +
geom_line(linewidth = 1.2) +
stat_function(fun = dnorm,
args = list(mean = 0, sd = 1),
color = "dark blue",
size = 1.2) +
theme_minimal() +
theme(legend.position = "") +
labs(title = "Standard Normal and T-Distribution",
subtitle = "1 Degree of Freedom for T-Distribution",
y = "P(X)",
x = "X")
df <- data.frame(x = seq(-3, 3, length.out = 100), by = 0.1) %>%
mutate(y = dt(x, 24))
ggplot(df,
aes(x = x,
y = y)) +
geom_area(fill = 'sky blue') +
geom_ribbon(data = subset(df, x >= 1.71),
aes(ymax = y),
ymin = 0, fill= "red", alpha = 0.5) +
geom_vline(aes(xintercept = 1.71),
linetype = 'dashed', size = 1.1) +
theme_minimal() +
labs(x = "X",
y = "P(X)",
title = "T Distribution and One-Tailed Hypothesis Test",
subtitle = "Alpha = 0.05, 24 DF, and Critical T => 1.71")
df <- data.frame(x = seq(-5, 5, length.out = 100), by = 0.1) %>%
mutate(y = dt(x, 1))
ggplot(df,
aes(x = x,
y = y,
color = "red")) +
geom_line(linewidth = 1.2) +
stat_function(fun = dnorm,
args = list(mean = 0, sd = 1),
color = "dark blue",
size = 1.2) +
theme_minimal() +
theme(legend.position = "") +
labs(title = "Standard Normal and T-Distribution",
subtitle = "1 Degree of Freedom for T-Distribution",
y = "P(X)",
x = "X")
library(dplyr, quietly = TRUE)
library(ggplot2, quietly = TRUE)
library(kableExtra, quietly = TRUE)
library(tidyquant, quietly = TRUE)
rm(list = ls())
library(dplyr)
library(ggplot2)
library(kableExtra)
pop_1 <- rnorm(10000, mean = 50.5, sd = 3)
pop_2 <- rnorm(5000, mean = 47.5, sd = 6)
xbar_1 <- mean(sample(pop_1, 500))
xbar_2 <- mean(sample(pop_2, 200))
diff <- xbar_1 - xbar_2
std_err <- sqrt((9/500) + (36/200))
interval = xbar_1 - xbar_2
moe = qnorm(.975,0,1)*std_err
int_lower = interval - qnorm(.975,0,1)*std_err
int_upper = interval + qnorm(.975,0,1)*std_err
means <- data.frame(xbar_1, xbar_2, diff, std_err,
moe, int_lower, int_upper)
kable(means,
align     = "ccccccc",
caption   = "Interval Estimation",
col.names = c("Xbar(1)", "Xbar(2)",
"Xbar(1)-Xbar(2)",
"Std. Error", "MOE",
"Lower Bound", "Upper Bound")) %>%
kable_styling(font_size = 11)
rm(list = ls())
library(dplyr)
library(ggplot2)
library(kableExtra)
library(ggplot2)
ggplot(data.frame(x = c(-10, 10)),
aes(x = x)) +
stat_function(fun = dchisq,
args = list(df = 1),
linewidth = 1.2) +
stat_function(fun = dnorm,
args = list(mean = 0, sd = 1),
linewidth = 1.2,
color = "red") +
theme_minimal() +
labs(x = "x",
y = "P(x)",
title = "Standard Normal and Chi-Squared Distribution",
subtitle = "1 degree of freedom")
library(ggplot2)
ggplot(data.frame(x = c(-30, 30)),
aes(x = x)) +
stat_function(fun = dchisq,
args = list(df = 10),
linewidth = 1.2) +
stat_function(fun = dnorm,
args = list(mean = 0, sd = 1),
linewidth = 1.2,
color = "dark blue") +
theme_minimal() +
labs(x = "x",
y = "P(x)",
title = "Chi-Squared Distribution",
subtitle = "10 degrees of freedom")
library(ggplot2)
ggplot(data.frame(x = c(-30, 30)),
aes(x = x)) +
stat_function(fun = dchisq,
args = list(df = 10),
linewidth = 1.2) +
stat_function(fun = dnorm,
args = list(mean = 0, sd = 1),
linewidth = 1.2,
color = "red") +
theme_minimal() +
labs(x = "x",
y = "P(x)",
title = "Chi-Squared Distribution",
subtitle = "10 degrees of freedom")
rm(list = ls())
library(dplyr)
library(ggplot2)
library(kableExtra)
library(ggplot2)
ggplot(data.frame(x = c(0, 10)),
aes(x = x)) +
stat_function(fun = dchisq,
args = list(df = 1),
linewidth = 1,
color = "dark blue") +
stat_function(fun = dchisq,
args = list(df = 2),
linewidth = 1,
color = "red") +
stat_function(fun = dchisq,
args = list(df = 3),
linewidth = 1,
color = "purple") +
stat_function(fun = dchisq,
args = list(df = 4),
linewidth = 1,
color = "green") +
stat_function(fun = dchisq,
args = list(df = 5),
linewidth = 1,
color = "brown") +
theme_minimal() +
labs(x = "x",
y = "P(x)",
title = "Chi-Squared Distributions",
subtitle = "1 to 5 degrees of freedom")
quarto::quarto::quarto_render()
quarto::quarto_render()
library(dplyr, quietly = TRUE)
library(ggplot2, quietly = TRUE)
library(kableExtra, quietly = TRUE)
library(lubridate, quietly = TRUE)
library(tidyquant, quietly = TRUE)
# Create x and y variables#
student <- tibble(person = c(1,2,3,4,5),
name   = c("Bob","Sally","Jim","Tony","Sarah"),
class  = c("Freshman","Freshman",
"Freshman","Freshman","Freshamn"),
grade  = c(3,5,29,55,144))
# Use kable function to produce a table
kable(student,
col.names = c("Obs",
"Name",
"Grade",
"Class Rank"),
align = c('c','c','c','c'),
caption = 'Ordinal Example') %>%
kable_styling(full_width = TRUE)
# Create x and y variables#
student <- tibble(person = c(1,2,3,4,5),
name   = c("Bob","Sally","Jim","Tony","Sarah"),
class  = c("Freshman","Sophmore",
"Junior","Freshman","Senior"),
grade  = c(4,3,2,4,1))
# Use kable function to produce a table
kable(student,
col.names = c("Observation",
"Name",
"Grade",
"Numeric Grade"),
align = c('c','c','c','c'),
caption = 'Nominal Example') %>%
kable_styling(full_width = TRUE)
UNRATE <- tq_get(c("VAUR",
"NCUR",
"WVUR",
"MDUR",
"UNRATE"),
get  = "economic.data",
from = "1939-01-01" ) %>%
mutate(value = price/100)  %>%
filter(date > ymd("2020-01-01")) %>%
mutate(geography = case_when(symbol == "VAUR" ~ "Virginia",
symbol == "NCUR" ~ "North Carollina",
symbol == "WVUR" ~ "West Virginia",
symbol == "MDUR" ~ "Maryland",
TRUE ~ "United States")) %>%
filter(date == max(date))
kable(UNRATE,
col.names = c('FRED Symbol', 'Date of Observation', "Value", "Value in Decimal Form", "Geography"),
align     = 'c',
caption = 'Unemployment Rate for Selected Geographies') %>%
kable_styling()
library(dplyr, quietly = TRUE)
library(ggplot2, quietly = TRUE)
library(kableExtra, quietly = TRUE)
library(tidyquant, quietly = TRUE)
rm(list = ls())
library(dplyr)
library(kableExtra)
library(tidyverse)
cardata <- mtcars
cardata2 <- cardata %>%
rownames_to_column() %>%
rename(car           = rowname) %>%
mutate(km_per_gallon = mpg*1.60934,
km_per_liter  = km_per_gallon*3.78541,
km2_per_liter = mpg*1.60934*3.78541) %>%
select(car, mpg, cyl, wt, km_per_gallon, km_per_liter, km2_per_liter)
kable(cardata[1:5,])
kable(cardata2[1:5,],
col.names = c("Car",
"MPG",
"Cylinders",
"Weight",
"Kilometers per Gallon",
"Kliometers per Liter",
"Squared KM/Gallon")) %>%
kable_classic()
quarto::quarto_render()
quarto::quarto_render()
