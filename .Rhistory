"P(25)", "P(90)")) %>%
kable_styling(font_size = 12)
rm(list = ls())
mean_iq <- 100
sd_iq <- 15
normal_1 <- tibble(P_le_125  <- pnorm(125, mean = 100, sd = 15),
p_ge_110  <- pnorm(110, mean = 100, sd = 15,
lower.tail = FALSE),
p_110_125 <- pnorm(125,100,15) - pnorm(110, 100, 15),
q_25      <- qnorm(.25,100,15),
q_10      <- qnorm(.90,100,15))
kable(normal_1,
align     = 'c',
digits    = 3,
caption   = 'Normal Distribution Example',
col.names = c("P(X < 125)", "P(X > 110)",
"P(110 < X < 125)",
"P(25)", "P(90)")) %>%
kable_styling(font_size = 12)
rm(list = ls())
mean_iq <- 100
sd_iq <- 15
normal_1 <- tibble(P_le_125  <- pnorm(125, mean = 100, sd = 15),
p_ge_110  <- pnorm(110, mean = 100, sd = 15,
lower.tail = FALSE),
p_110_125 <- pnorm(125,100,15) - pnorm(110, 100, 15),
q_25      <- qnorm(.25,100,15),
q_10      <- qnorm(.90,100,15))
kable(normal_1,
align     = 'c',
digits    = 3,
caption   = 'Normal Distribution Example',
col.names = c("P(X <= 125)", "P(X >= 110)",
"P(110 <= X <= 125)",
"P(0.25)", "P(0.90)")) %>%
kable_styling(font_size = 12)
(1380-1150)/150
prnom(1.53,0,1)
pnorm(1.533,0,1)
1 -pnorm(1.533,0,1)
rm(list = ls())
mu = 1150
sigma = 150
x = 1380
norm <- tibble(z = (x-mu)/sigma,
p_1 <- pnorm(z, 0, 1),
p_2 <- 1-pnorm(z, 0, 1),
p_3 <- pnorm(z, 0, 1, lower.tail = FALSE),
p_4 <- pnorm(x, mu, sigma, lower.tail = FALSE))
kable(norm,
align  = 'c',
digits = 4,
col.names = c('Z', 'P(Z)', '1-P(Z)', '1-P(Z)', 'P(X > 1380')) %>%
kable_classic()
rm(list = ls())
mu = 1150
sigma = 150
x = 1380
norm <- tibble(z = (x-mu)/sigma,
p_1 <- pnorm(z, 0, 1),
p_2 <- 1-pnorm(z, 0, 1),
p_3 <- pnorm(z, 0, 1, lower.tail = FALSE),
p_4 <- pnorm(x, mu, sigma, lower.tail = FALSE))
kable(norm,
align  = 'c',
digits = 4,
col.names = c('Z', 'P(Z)', '1-P(Z)', '1-P(Z)', 'P(X > 1380')) %>%
kable_classic()
# Create data for the normal curve
curve_data <- tibble(X = seq(mu - 4 * sigma, mu + 4 * sigma, length.out = 1000),
Y = dnorm(X, mean = mu, sd = sigma))
# Data for shaded region (right tail)
shade_data <- curve_data %>%
filter(X >= x)
# Plot
ggplot(curve_data, aes(x = X, y = Y)) +
geom_line(size = 1, color = "steelblue") +
geom_area(data = shade_data, aes(x = X, y = Y),
fill = "steelblue", alpha = 0.4) +
geom_vline(xintercept = x, linetype = "dashed", color = "red") +
annotate("text", x = x + 40, y = 0.0005,
label = paste0("P(X > 1380) = ",
round(pnorm(x, mu, sigma, lower.tail = FALSE), 4)),
hjust = 0, color = "black") +
labs(title = "Normal Distribution with Shaded Tail",
x = "X",
y = "Density") +
theme_minimal(base_size = 13)
rm(list = ls())
mu = 1150
sigma = 150
x = 1380
norm <- tibble(z = (x-mu)/sigma,
p_1 <- pnorm(z, 0, 1),
p_2 <- 1-pnorm(z, 0, 1),
p_3 <- pnorm(z, 0, 1, lower.tail = FALSE),
p_4 <- pnorm(x, mu, sigma, lower.tail = FALSE))
kable(norm,
align  = 'c',
digits = 4,
col.names = c('Z', 'P(Z)', '1-P(Z)', '1-P(Z)', 'P(X > 1380')) %>%
kable_classic()
# Create data for the normal curve
curve_data <- tibble(X = seq(mu - 4 * sigma, mu + 4 * sigma, length.out = 1000),
Y = dnorm(X, mean = mu, sd = sigma))
# Data for shaded region (right tail)
shade_data <- curve_data %>%
filter(X >= x)
# Plot
ggplot(curve_data, aes(x = X, y = Y)) +
geom_line(linewidth = 1, color = "steelblue") +
geom_area(data = shade_data, aes(x = X, y = Y),
fill = "steelblue", alpha = 0.4) +
geom_vline(xintercept = x, linetype = "dashed", color = "red") +
annotate("text", x = x + 40, y = 0.0005,
label = paste0("P(X > 1380) = ",
round(pnorm(x, mu, sigma, lower.tail = FALSE), 4)),
hjust = 0, color = "black") +
labs(title = "Normal Distribution with Shaded Tail",
x = "X",
y = "Density") +
theme_minimal(base_size = 13)
rm(list = ls())
mu = 1150
sigma = 150
x = 1380
norm <- tibble(z = (x-mu)/sigma,
p_1 <- pnorm(z, 0, 1),
p_2 <- 1-pnorm(z, 0, 1),
p_3 <- pnorm(z, 0, 1, lower.tail = FALSE),
p_4 <- pnorm(x, mu, sigma, lower.tail = FALSE))
kable(norm,
align  = 'c',
digits = 4,
col.names = c('Z', 'P(Z)', '1-P(Z)', '1-P(Z)', 'P(X > 1380')) %>%
kable_classic()
# Create data for the normal curve
curve_data <- tibble(X = seq(mu - 4 * sigma,
mu + 4 * sigma, length.out = 1000),
Y = dnorm(X, mean = mu, sd = sigma))
# Data for shaded region (right tail)
shade_data <- curve_data %>%
filter(X >= x)
# Plot
ggplot(curve_data,
aes(x = X,
y = Y)) +
geom_line(linewidth = 1, color = "steelblue") +
geom_area(data = shade_data,
aes(x = X,
y = Y),
fill = "steelblue",
alpha = 0.4) +
geom_vline(xintercept = x,
linetype = "dashed",
color = "red") +
annotate("text",
x = x + 40,
y = 0.001,
label = paste0("P(X > 1380) = ",
round(pnorm(x, mu, sigma, lower.tail = FALSE), 4)),
hjust = 0,
color = "black") +
labs(title = "Normal Distribution with Shaded Tail",
x = "X",
y = "Density") +
theme_minimal(base_size = 13)
rm(list = ls())
mu = 1150
sigma = 150
x = 1380
norm <- tibble(z = (x-mu)/sigma,
p_1 <- pnorm(z, 0, 1),
p_2 <- 1-pnorm(z, 0, 1),
p_3 <- pnorm(z, 0, 1, lower.tail = FALSE),
p_4 <- pnorm(x, mu, sigma, lower.tail = FALSE))
kable(norm,
align  = 'c',
digits = 4,
col.names = c('Z', 'P(Z)', '1-P(Z)', '1-P(Z)', 'P(X > 1380')) %>%
kable_classic()
# Create data for the normal curve
curve_data <- tibble(X = seq(mu - 4 * sigma,
mu + 4 * sigma, length.out = 1000),
Y = dnorm(X, mean = mu, sd = sigma))
# Data for shaded region (right tail)
shade_data <- curve_data %>%
filter(X >= x)
# Plot
ggplot(curve_data,
aes(x = X,
y = Y)) +
geom_line(linewidth = 1, color = "steelblue") +
geom_area(data = shade_data,
aes(x = X,
y = Y),
fill = "steelblue",
alpha = 0.4) +
geom_vline(xintercept = x,
linetype = "dashed",
color = "red") +
annotate("text",
x = x + 40,
y = 0.001,
label = paste0("P(X > 1380) = ",
round(pnorm(x, mu, sigma, lower.tail = FALSE), 4)),
hjust = 0,
color = "black") +
labs(title = "Normal Distribution with Shaded Tail",
x = "X",
y = "Density") +
theme_minimal(base_size = 13)
rm(list = ls())
library(dplyr)
library(kableExtra)
mu = 1150
sigma = 150
x = 1380
norm <- tibble(z = (x-mu)/sigma,
p_1 <- pnorm(z, 0, 1),
p_2 <- 1-pnorm(z, 0, 1),
p_3 <- pnorm(z, 0, 1, lower.tail = FALSE),
p_4 <- pnorm(x, mu, sigma, lower.tail = FALSE))
kable(norm,
align  = 'c',
digits = 4,
col.names = c('Z', 'P(Z)', '1-P(Z)', '1-P(Z)', 'P(X > 1380')) %>%
kable_classic()
# Create data for the normal curve
curve_data <- tibble(X = seq(mu - 4 * sigma,
mu + 4 * sigma, length.out = 1000),
Y = dnorm(X, mean = mu, sd = sigma))
# Data for shaded region (right tail)
shade_data <- curve_data %>%
filter(X >= x)
# Plot
ggplot(curve_data,
aes(x = X,
y = Y)) +
geom_line(linewidth = 1, color = "steelblue") +
geom_area(data = shade_data,
aes(x = X,
y = Y),
fill = "steelblue",
alpha = 0.4) +
geom_vline(xintercept = x,
linetype = "dashed",
color = "red") +
annotate("text",
x = x + 40,
y = 0.001,
label = paste0("P(X > 1380) = ",
round(pnorm(x, mu, sigma, lower.tail = FALSE), 4)),
hjust = 0,
color = "black") +
labs(title = "Normal Distribution with Shaded Tail Where P(X>1380)",
x = "X",
y = "Density") +
theme_minimal(base_size = 13)
rm(list = ls())
library(dplyr)
library(kableExtra)
mu = 1150
sigma = 150
x = 1380
norm <- tibble(z = (x-mu)/sigma,
p_1 <- pnorm(z, 0, 1),
p_2 <- 1-pnorm(z, 0, 1),
p_3 <- pnorm(z, 0, 1, lower.tail = FALSE),
p_4 <- pnorm(x, mu, sigma, lower.tail = FALSE))
kable(norm,
align  = 'c',
digits = 4,
col.names = c('Z', 'P(Z)', '1-P(Z)', '1-P(Z)', 'P(X > 1380')) %>%
kable_classic()
# Create data for the normal curve
curve_data <- tibble(X = seq(mu - 4 * sigma,
mu + 4 * sigma, length.out = 1000),
Y = dnorm(X, mean = mu, sd = sigma))
# Data for shaded region (right tail)
shade_data <- curve_data %>%
filter(X >= x)
# Plot
ggplot(curve_data,
aes(x = X,
y = Y)) +
geom_line(linewidth = 1, color = "steelblue") +
geom_area(data = shade_data,
aes(x = X,
y = Y),
fill = "steelblue",
alpha = 0.4) +
geom_vline(xintercept = x,
linetype = "dashed",
color = "red") +
annotate("text",
x = x + 40,
y = 0.001,
label = paste0("P(X > 1380) = ",
round(pnorm(x, mu, sigma, lower.tail = FALSE), 4)),
hjust = 0,
color = "black") +
labs(title = "Normal Distribution with Shaded Tail Where P(X>1380)",
x = "X",
y = "Density") +
theme_minimal(base_size = 12)
rm(list = ls())
set.seed(1234)
mu = 50
sigma1 = 3.5
sigma2 = 1.5
df_1 <- tibble(x = seq(1,100, by = 0.01),
y1 = dnorm(x, mu, sigma1),
y2 = dnorm(x, mu, sigma2))
ggplot() +
geom_line(data = df_1, aes(x = x, y = y1)) +
geom_line(data = df_1, aes(x = x, y = y2, color = 'red')) +
theme_minimal() +
theme(legend.position = "") +
labs(x = "X",
y = "P(X)")
ggplot() +
geom_line(data = df_1, aes(x = x, y = y2, color = 'red')) +
stat_function(fun   = dunif,
args  = list(min = 30, max = 50),
color = "blue") +
stat_function(fun   = dnorm,
args  = list(mean = 50, sd = 3.5),
color = "purple") +
theme_minimal() +
theme(legend.position = "") +
labs(x = "X",
y = "P(X)")
mu = 68
sd = 4.25
#Create a limiting function
lower_bound <- 63
upper_bound <- 67
dnorm_limit <- function(x) {
y <- dnorm(x, mean = mu, sd = sd)
y[x < lower_bound  |  x > upper_bound] <- NA
return(y)
}
# ggplot() with dummy data
ggplot(data.frame(x = c(50, 90)),
aes(x = x)) +
stat_function(fun = dnorm, args = list(mean = mu, sd = sd)) +
stat_function(fun = dnorm_limit, geom = "area", fill = "blue", alpha = 0.2) +
scale_y_continuous(labels   = scales::label_number(a=0.01),
limits   = c(0,0.1),
n.breaks = 10 ) +
theme_minimal() +
theme(legend.position = "") +
labs(x = "X",
y = "P(X)")
value = round(qnorm(.9, 68, 4.25),3)
ggplot(data.frame(x = c(50, 90)),
aes(x = x)) +
stat_function(fun = pnorm, args = list(mean = mu, sd = sd)) +
geom_vline(xintercept = qnorm(0.90, mean = 68, sd = 4.25),
color = 'red') +
geom_hline(yintercept = pnorm(73.447, mean = 68, sd = 4.25),
color = 'blue')+
theme_minimal() +
theme(legend.position = "") +
labs(x = "X",
y = "CDF(X)")
library(dplyr, quietly = TRUE)
library(ggplot2, quietly = TRUE)
library(kableExtra, quietly = TRUE)
library(tidyquant, quietly = TRUE)
rm(list = ls())
mu = 15
lambda = 1/mu
exp_1 <- tibble(q1 <- pexp(6, lambda, lower.tail = TRUE),
q2 <- pexp(20, lambda, lower.tail = FALSE),
q3 <- pexp(18, lambda, lower.tail = TRUE) -
pexp(12, lambda, lower.tail = TRUE),
q4 <- qexp(0.2, lambda, lower.tail = TRUE),
q5 <- qexp(0.86, lambda, lower.tail = FALSE))
kable(exp_1,
align     = 'c',
caption   = 'Exponential Distribution Example',
col.names = c('P(X < 6)',
'P(X > 20)',
'P(12 < X < 18)',
'P(20)',
'P(85)')) %>%
kable_styling(font_size = 12)
rm(list = ls())
mu = 15
lambda = 1/mu
exp_1 <- tibble(q1 <- pexp(6, lambda, lower.tail = TRUE),
q2 <- pexp(20, lambda, lower.tail = FALSE),
q3 <- pexp(18, lambda, lower.tail = TRUE) -
pexp(12, lambda, lower.tail = TRUE),
q4 <- qexp(0.2, lambda, lower.tail = TRUE),
q5 <- qexp(0.86, lambda, lower.tail = FALSE))
kable(exp_1,
align     = 'c',
digits    = 3,
caption   = 'Exponential Distribution Example',
col.names = c('P(X < 6)',
'P(X > 20)',
'P(12 < X < 18)',
'P(20)',
'P(85)')) %>%
kable_styling(font_size = 12)
rm(list = ls())
set.seed(123)
library(dplyr)
library(kableExtra)
exp_list <- list()
lambda <- 15
ran_exp(tibble(replicate(3, rexp(5, lambda))))
rm(list = ls())
set.seed(123)
library(dplyr)
library(kableExtra)
exp_list <- list()
lambda <- 15
ran_exp <- tibble(replicate(3, rexp(5, lambda))))
rm(list = ls())
set.seed(123)
library(dplyr)
library(kableExtra)
exp_list <- list()
lambda <- 15
ran_exp <- tibble(replicate(3, rexp(5, lambda)))
kable(ran_exp[1:5,],
align     = "ccc",
caption   = " Norm Random Observations",
col.names = c("1", "2", "3")) %>%
kable_styling(font_size = 12)
rm(list = ls())
set.seed(123)
library(dplyr)
library(kableExtra)
exp_list <- list()
lambda <- 15
ran_exp <- tibble(replicate(3, rexp(5, lambda)))
kable(ran_exp[1:5,],
align     = "ccc",
caption   = " Exponential Random Observations",
col.names = c("1", "2", "3")) %>%
kable_styling(font_size = 12)
rm(list = ls())
set.seed(123)
library(dplyr)
library(kableExtra)
exp_list <- list()
lambda <- 15
ran_exp <- tibble(replicate(3, rexp(5, lambda)))
kable(ran_exp[1:5,],
align     = 'c',
digits    = 4,
caption   = 'Exponential Random Observations',
col.names = c('1', '2', '3')) %>%
kable_styling(font_size = 12)
rm(list = ls())
set.seed(123)
library(dplyr)
library(kableExtra)
exp_list <- list()
lambda <- 15
ran_exp <- tibble(replicate(3, rexp(5, lambda)))
kable(ran_exp[1:5,],
align     = 'c',
caption   = 'Exponential Random Observations',
col.names = c('1', '2', '3')) %>%
kable_styling(font_size = 12)
set.seed(123)
lambda = 5
df_exp <- tibble(x = seq(0,1,by = 0.001),
y = dexp(x, rate = 5))
ggplot(data = df_exp,
aes(x = x,
y = y)) +
geom_line(linewidth = 1.2,
color = "dark blue") +
stat_function(fun = dexp,
args = list(rate = 10),
color = "red") +
theme_minimal() +
labs(x = "x",
y = "f(x)")
library(dplyr, quietly = TRUE)
library(ggplot2, quietly = TRUE)
library(kableExtra, quietly = TRUE)
library(tidyquant, quietly = TRUE)
rm(list = ls())
library(dplyr)
library(kableExtra)
population <- seq(0, 100000, by = 1)
samples <- 5
avg_x <- rep(0,samples)
for(i in 1:samples){
avg_x[i] <- mean(sample(population, size = 100, replace = FALSE))
}
samples <- tibble(avg_x) %>% rbind(mean(population)) %>% t()
kable(samples,
align       = "cccccc",
format.args = list(big.mark = ",",
scientific = FALSE),
caption     = "Sample Averages and Population Mean",
col.names   = c("Sample 1", "Sample 2",
"Sample 3", "Sample 4",
"Sample 5", "Population")) %>%
kable_styling(font_size = 10)
quarto::quatro_render()
quarto::quarto_render()
quarto::quarto_render()
