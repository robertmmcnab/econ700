library(tidyverse)
library(kableExtra)
a <- 30
b <- 70
# Generate 3 columns of 5 uniform random observations
ran_unif <- tibble(replicate(3, runif(5, min = a, max = b)))
kable(ran_unif,
align     = "ccc",
caption   = "Uniform Random Observations",
col.names = c("1", "2", "3")) %>%
kable_styling(font_size = 12)
View(ran_unif)
rm(list = ls())
library(tidyverse)
library(kableExtra)
a <- 30
b <- 70
# Generate 3 columns of 5 uniform random observations
ran_unif <- tibble(replicate(3, runif(5, min = a, max = b)))
kable(ran_unif,
align     = "ccc",
caption   = "Uniform Random Observations",
col.names = c("1", "2", "3")) %>%
kable_styling(font_size = 12)
rm(list = ls())
library(tidyverse)
library(kableExtra)
a <- 30
b <- 70
# Generate 3 columns of 5 uniform random observations
ran_unif <- tibble(replicate(3, runif(5, min = a, max = b)))
kable(ran_unif,
align     = "c",
caption   = "Uniform Random Observations",
col.names = c("Sample 1", "Sample 2", "Sample 3")) %>%
kable_styling(font_size = 12)
rm(list = ls())
library(tidyverse)
library(kableExtra)
a <- 30
b <- 70
# Generate 3 columns of 5 uniform random observations
ran_unif <- as_tibble(
replicate(3, runif(5, min = a, max = b)),
.name_repair = ~ paste0("Sample_", seq_along(.))) %>%
mutate(Observation = paste0("Obs_", row_number())) %>%
relocate(Observation)
kable(ran_unif,
align     = "c",
caption   = "Uniform Random Observations",
col.names = c("Observation", "Sample 1", "Sample 2", "Sample 3")) %>%
kable_styling(font_size = 12)
rm(list = ls())
library(tidyverse)
library(kableExtra)
a <- 30
b <- 70
# Generate 3 columns of 5 uniform random observations
ran_unif <- as_tibble(
replicate(3, runif(5, min = a, max = b)),
.name_repair = ~ paste0("Sample_", seq_along(.))) %>%
mutate(Observation = paste0("Observation_", row_number())) %>%
relocate(Observation)
kable(ran_unif,
align     = "c",
caption   = "Uniform Random Observations",
col.names = c("Observation", "Sample 1", "Sample 2", "Sample 3")) %>%
kable_styling(font_size = 12)
rm(list = ls())
a = 10
b = 30
c = 15
d = 20
uni_frame <- tibble(d_uni_man <- 1/(b-a),
d_uni_calc <- dunif(c, min = a, max = b),
d_uni_man_range <- (d-c)/(b-a),
d_uni_calc_range <- punif(20, min = a, max = b) -
punif(15, min = a, max = b),
p_uni_man <- (d-a)/(b-a),
p_uni_calc <- punif(d, min = a, max = b))
kable(uni_frame,
align       = 'c',
digits      = 4,
caption     = 'Continuous Uniform Distribution
a=10 and b=30',
col.names   = c('Manual',
'Uniform(10,30)',
'Manual P(15 <= X <= 20)',
'P(15 <= X <= 20)',
'Manual P(X < 20)',
'P(X < 20)')) %>%
kable_classic()
library(dplyr, quietly = TRUE)
library(ggplot2, quietly = TRUE)
library(kableExtra, quietly = TRUE)
library(tidyquant, quietly = TRUE)
rm(list = ls())
set.seed(2525)
df_norm <- data.frame(x = rnorm(600, mean = 500, sd = 100))
ggplot(data = df_norm,
aes(x),
size  = 1.2) +
geom_density(linewidth = 1.2,
color = "dark blue") +
stat_function(fun  = dnorm,
args  = list(mean = 500, sd = 100),
linewidth  = 1.2,
color = "red") +
theme_minimal() +
labs(x = "x",
y = "Density")
quarto::quarto_render()
library(dplyr, quietly = TRUE)
library(ggplot2, quietly = TRUE)
library(kableExtra, quietly = TRUE)
library(tidyquant, quietly = TRUE)
rm(list = ls())
set.seed(2525)
df_norm <- tibble(x = rnorm(600, mean = 500, sd = 100))
ggplot(data = df_norm,
aes(x),
size  = 1.2) +
geom_density(linewidth = 1.2,
color = "dark blue") +
stat_function(fun  = dnorm,
args  = list(mean = 500, sd = 100),
linewidth  = 1.2,
color = "red") +
theme_minimal() +
labs(x = "x",
y = "Density")
rm(list = ls())
mean_iq <- 100
sd_iq <- 15
normal_1 <- tibble(P_le_125  <- pnorm(125, mean = 100, sd = 15),
p_ge_110  <- pnorm(110, mean = 100, sd = 15,
lower.tail = FALSE),
p_110_125 <- pnorm(125,100,15) - pnorm(110, 100, 15),
q_25      <- qnorm(.25,100,15),
q_10      <- qnorm(.90,100,15))
kable(normal_1,
align     = "ccccc",
caption   = " Normal Distribution Example",
col.names = c("P(X < 125)", "P(X > 110)",
"P(110 < X < 125)",
"P(25)", "P(90)")) %>%
kable_styling(font_size = 12)
rm(list = ls())
mean_iq <- 100
sd_iq <- 15
normal_1 <- tibble(P_le_125  <- pnorm(125, mean = 100, sd = 15),
p_ge_110  <- pnorm(110, mean = 100, sd = 15,
lower.tail = FALSE),
p_110_125 <- pnorm(125,100,15) - pnorm(110, 100, 15),
q_25      <- qnorm(.25,100,15),
q_10      <- qnorm(.90,100,15))
kable(normal_1,
align     = 'c',
digits    = 3,
caption   = 'Normal Distribution Example',
col.names = c("P(X < 125)", "P(X > 110)",
"P(110 < X < 125)",
"P(25)", "P(90)")) %>%
kable_styling(font_size = 12)
rm(list = ls())
mean_iq <- 100
sd_iq <- 15
normal_1 <- tibble(P_le_125  <- pnorm(125, mean = 100, sd = 15),
p_ge_110  <- pnorm(110, mean = 100, sd = 15,
lower.tail = FALSE),
p_110_125 <- pnorm(125,100,15) - pnorm(110, 100, 15),
q_25      <- qnorm(.25,100,15),
q_10      <- qnorm(.90,100,15))
kable(normal_1,
align     = 'c',
digits    = 3,
caption   = 'Normal Distribution Example',
col.names = c("P(X <= 125)", "P(X >= 110)",
"P(110 <= X <= 125)",
"P(0.25)", "P(0.90)")) %>%
kable_styling(font_size = 12)
(1380-1150)/150
prnom(1.53,0,1)
pnorm(1.533,0,1)
1 -pnorm(1.533,0,1)
rm(list = ls())
mu = 1150
sigma = 150
x = 1380
norm <- tibble(z = (x-mu)/sigma,
p_1 <- pnorm(z, 0, 1),
p_2 <- 1-pnorm(z, 0, 1),
p_3 <- pnorm(z, 0, 1, lower.tail = FALSE),
p_4 <- pnorm(x, mu, sigma, lower.tail = FALSE))
kable(norm,
align  = 'c',
digits = 4,
col.names = c('Z', 'P(Z)', '1-P(Z)', '1-P(Z)', 'P(X > 1380')) %>%
kable_classic()
rm(list = ls())
mu = 1150
sigma = 150
x = 1380
norm <- tibble(z = (x-mu)/sigma,
p_1 <- pnorm(z, 0, 1),
p_2 <- 1-pnorm(z, 0, 1),
p_3 <- pnorm(z, 0, 1, lower.tail = FALSE),
p_4 <- pnorm(x, mu, sigma, lower.tail = FALSE))
kable(norm,
align  = 'c',
digits = 4,
col.names = c('Z', 'P(Z)', '1-P(Z)', '1-P(Z)', 'P(X > 1380')) %>%
kable_classic()
# Create data for the normal curve
curve_data <- tibble(X = seq(mu - 4 * sigma, mu + 4 * sigma, length.out = 1000),
Y = dnorm(X, mean = mu, sd = sigma))
# Data for shaded region (right tail)
shade_data <- curve_data %>%
filter(X >= x)
# Plot
ggplot(curve_data, aes(x = X, y = Y)) +
geom_line(size = 1, color = "steelblue") +
geom_area(data = shade_data, aes(x = X, y = Y),
fill = "steelblue", alpha = 0.4) +
geom_vline(xintercept = x, linetype = "dashed", color = "red") +
annotate("text", x = x + 40, y = 0.0005,
label = paste0("P(X > 1380) = ",
round(pnorm(x, mu, sigma, lower.tail = FALSE), 4)),
hjust = 0, color = "black") +
labs(title = "Normal Distribution with Shaded Tail",
x = "X",
y = "Density") +
theme_minimal(base_size = 13)
rm(list = ls())
mu = 1150
sigma = 150
x = 1380
norm <- tibble(z = (x-mu)/sigma,
p_1 <- pnorm(z, 0, 1),
p_2 <- 1-pnorm(z, 0, 1),
p_3 <- pnorm(z, 0, 1, lower.tail = FALSE),
p_4 <- pnorm(x, mu, sigma, lower.tail = FALSE))
kable(norm,
align  = 'c',
digits = 4,
col.names = c('Z', 'P(Z)', '1-P(Z)', '1-P(Z)', 'P(X > 1380')) %>%
kable_classic()
# Create data for the normal curve
curve_data <- tibble(X = seq(mu - 4 * sigma, mu + 4 * sigma, length.out = 1000),
Y = dnorm(X, mean = mu, sd = sigma))
# Data for shaded region (right tail)
shade_data <- curve_data %>%
filter(X >= x)
# Plot
ggplot(curve_data, aes(x = X, y = Y)) +
geom_line(linewidth = 1, color = "steelblue") +
geom_area(data = shade_data, aes(x = X, y = Y),
fill = "steelblue", alpha = 0.4) +
geom_vline(xintercept = x, linetype = "dashed", color = "red") +
annotate("text", x = x + 40, y = 0.0005,
label = paste0("P(X > 1380) = ",
round(pnorm(x, mu, sigma, lower.tail = FALSE), 4)),
hjust = 0, color = "black") +
labs(title = "Normal Distribution with Shaded Tail",
x = "X",
y = "Density") +
theme_minimal(base_size = 13)
rm(list = ls())
mu = 1150
sigma = 150
x = 1380
norm <- tibble(z = (x-mu)/sigma,
p_1 <- pnorm(z, 0, 1),
p_2 <- 1-pnorm(z, 0, 1),
p_3 <- pnorm(z, 0, 1, lower.tail = FALSE),
p_4 <- pnorm(x, mu, sigma, lower.tail = FALSE))
kable(norm,
align  = 'c',
digits = 4,
col.names = c('Z', 'P(Z)', '1-P(Z)', '1-P(Z)', 'P(X > 1380')) %>%
kable_classic()
# Create data for the normal curve
curve_data <- tibble(X = seq(mu - 4 * sigma,
mu + 4 * sigma, length.out = 1000),
Y = dnorm(X, mean = mu, sd = sigma))
# Data for shaded region (right tail)
shade_data <- curve_data %>%
filter(X >= x)
# Plot
ggplot(curve_data,
aes(x = X,
y = Y)) +
geom_line(linewidth = 1, color = "steelblue") +
geom_area(data = shade_data,
aes(x = X,
y = Y),
fill = "steelblue",
alpha = 0.4) +
geom_vline(xintercept = x,
linetype = "dashed",
color = "red") +
annotate("text",
x = x + 40,
y = 0.001,
label = paste0("P(X > 1380) = ",
round(pnorm(x, mu, sigma, lower.tail = FALSE), 4)),
hjust = 0,
color = "black") +
labs(title = "Normal Distribution with Shaded Tail",
x = "X",
y = "Density") +
theme_minimal(base_size = 13)
rm(list = ls())
mu = 1150
sigma = 150
x = 1380
norm <- tibble(z = (x-mu)/sigma,
p_1 <- pnorm(z, 0, 1),
p_2 <- 1-pnorm(z, 0, 1),
p_3 <- pnorm(z, 0, 1, lower.tail = FALSE),
p_4 <- pnorm(x, mu, sigma, lower.tail = FALSE))
kable(norm,
align  = 'c',
digits = 4,
col.names = c('Z', 'P(Z)', '1-P(Z)', '1-P(Z)', 'P(X > 1380')) %>%
kable_classic()
# Create data for the normal curve
curve_data <- tibble(X = seq(mu - 4 * sigma,
mu + 4 * sigma, length.out = 1000),
Y = dnorm(X, mean = mu, sd = sigma))
# Data for shaded region (right tail)
shade_data <- curve_data %>%
filter(X >= x)
# Plot
ggplot(curve_data,
aes(x = X,
y = Y)) +
geom_line(linewidth = 1, color = "steelblue") +
geom_area(data = shade_data,
aes(x = X,
y = Y),
fill = "steelblue",
alpha = 0.4) +
geom_vline(xintercept = x,
linetype = "dashed",
color = "red") +
annotate("text",
x = x + 40,
y = 0.001,
label = paste0("P(X > 1380) = ",
round(pnorm(x, mu, sigma, lower.tail = FALSE), 4)),
hjust = 0,
color = "black") +
labs(title = "Normal Distribution with Shaded Tail",
x = "X",
y = "Density") +
theme_minimal(base_size = 13)
rm(list = ls())
library(dplyr)
library(kableExtra)
mu = 1150
sigma = 150
x = 1380
norm <- tibble(z = (x-mu)/sigma,
p_1 <- pnorm(z, 0, 1),
p_2 <- 1-pnorm(z, 0, 1),
p_3 <- pnorm(z, 0, 1, lower.tail = FALSE),
p_4 <- pnorm(x, mu, sigma, lower.tail = FALSE))
kable(norm,
align  = 'c',
digits = 4,
col.names = c('Z', 'P(Z)', '1-P(Z)', '1-P(Z)', 'P(X > 1380')) %>%
kable_classic()
# Create data for the normal curve
curve_data <- tibble(X = seq(mu - 4 * sigma,
mu + 4 * sigma, length.out = 1000),
Y = dnorm(X, mean = mu, sd = sigma))
# Data for shaded region (right tail)
shade_data <- curve_data %>%
filter(X >= x)
# Plot
ggplot(curve_data,
aes(x = X,
y = Y)) +
geom_line(linewidth = 1, color = "steelblue") +
geom_area(data = shade_data,
aes(x = X,
y = Y),
fill = "steelblue",
alpha = 0.4) +
geom_vline(xintercept = x,
linetype = "dashed",
color = "red") +
annotate("text",
x = x + 40,
y = 0.001,
label = paste0("P(X > 1380) = ",
round(pnorm(x, mu, sigma, lower.tail = FALSE), 4)),
hjust = 0,
color = "black") +
labs(title = "Normal Distribution with Shaded Tail Where P(X>1380)",
x = "X",
y = "Density") +
theme_minimal(base_size = 13)
rm(list = ls())
library(dplyr)
library(kableExtra)
mu = 1150
sigma = 150
x = 1380
norm <- tibble(z = (x-mu)/sigma,
p_1 <- pnorm(z, 0, 1),
p_2 <- 1-pnorm(z, 0, 1),
p_3 <- pnorm(z, 0, 1, lower.tail = FALSE),
p_4 <- pnorm(x, mu, sigma, lower.tail = FALSE))
kable(norm,
align  = 'c',
digits = 4,
col.names = c('Z', 'P(Z)', '1-P(Z)', '1-P(Z)', 'P(X > 1380')) %>%
kable_classic()
# Create data for the normal curve
curve_data <- tibble(X = seq(mu - 4 * sigma,
mu + 4 * sigma, length.out = 1000),
Y = dnorm(X, mean = mu, sd = sigma))
# Data for shaded region (right tail)
shade_data <- curve_data %>%
filter(X >= x)
# Plot
ggplot(curve_data,
aes(x = X,
y = Y)) +
geom_line(linewidth = 1, color = "steelblue") +
geom_area(data = shade_data,
aes(x = X,
y = Y),
fill = "steelblue",
alpha = 0.4) +
geom_vline(xintercept = x,
linetype = "dashed",
color = "red") +
annotate("text",
x = x + 40,
y = 0.001,
label = paste0("P(X > 1380) = ",
round(pnorm(x, mu, sigma, lower.tail = FALSE), 4)),
hjust = 0,
color = "black") +
labs(title = "Normal Distribution with Shaded Tail Where P(X>1380)",
x = "X",
y = "Density") +
theme_minimal(base_size = 12)
rm(list = ls())
set.seed(1234)
mu = 50
sigma1 = 3.5
sigma2 = 1.5
df_1 <- tibble(x = seq(1,100, by = 0.01),
y1 = dnorm(x, mu, sigma1),
y2 = dnorm(x, mu, sigma2))
ggplot() +
geom_line(data = df_1, aes(x = x, y = y1)) +
geom_line(data = df_1, aes(x = x, y = y2, color = 'red')) +
theme_minimal() +
theme(legend.position = "") +
labs(x = "X",
y = "P(X)")
ggplot() +
geom_line(data = df_1, aes(x = x, y = y2, color = 'red')) +
stat_function(fun   = dunif,
args  = list(min = 30, max = 50),
color = "blue") +
stat_function(fun   = dnorm,
args  = list(mean = 50, sd = 3.5),
color = "purple") +
theme_minimal() +
theme(legend.position = "") +
labs(x = "X",
y = "P(X)")
mu = 68
sd = 4.25
#Create a limiting function
lower_bound <- 63
upper_bound <- 67
dnorm_limit <- function(x) {
y <- dnorm(x, mean = mu, sd = sd)
y[x < lower_bound  |  x > upper_bound] <- NA
return(y)
}
# ggplot() with dummy data
ggplot(data.frame(x = c(50, 90)),
aes(x = x)) +
stat_function(fun = dnorm, args = list(mean = mu, sd = sd)) +
stat_function(fun = dnorm_limit, geom = "area", fill = "blue", alpha = 0.2) +
scale_y_continuous(labels   = scales::label_number(a=0.01),
limits   = c(0,0.1),
n.breaks = 10 ) +
theme_minimal() +
theme(legend.position = "") +
labs(x = "X",
y = "P(X)")
value = round(qnorm(.9, 68, 4.25),3)
ggplot(data.frame(x = c(50, 90)),
aes(x = x)) +
stat_function(fun = pnorm, args = list(mean = mu, sd = sd)) +
geom_vline(xintercept = qnorm(0.90, mean = 68, sd = 4.25),
color = 'red') +
geom_hline(yintercept = pnorm(73.447, mean = 68, sd = 4.25),
color = 'blue')+
theme_minimal() +
theme(legend.position = "") +
labs(x = "X",
y = "CDF(X)")
