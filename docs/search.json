[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ECON 700",
    "section": "",
    "text": "0.1 Course Introduction\nNote: The course is under construction. Many links will not work.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>ECON 700</span>"
    ]
  },
  {
    "objectID": "index.html#course-introduction",
    "href": "index.html#course-introduction",
    "title": "ECON 700",
    "section": "",
    "text": "About\n\n\nMeet Your Instructor\n\n\nReview the Course Objectives and Materials\n\n\nSyllabus",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>ECON 700</span>"
    ]
  },
  {
    "objectID": "index.html#module-01-introduction-to-r-and-descriptive-statistics",
    "href": "index.html#module-01-introduction-to-r-and-descriptive-statistics",
    "title": "ECON 700",
    "section": "0.2 Module 01 – Introduction to R and Descriptive Statistics",
    "text": "0.2 Module 01 – Introduction to R and Descriptive Statistics\n\n\nModule 1.0 - Module 1 Overview\n\n\nModule 1.1 - Data and the Challenge of Economic Analysis\n\n\nModule 1.2 – Introduction to R\n\n\nModule 1.3 – Variables and Assignment Basics in R",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>ECON 700</span>"
    ]
  },
  {
    "objectID": "index.html#module-02-probability",
    "href": "index.html#module-02-probability",
    "title": "ECON 700",
    "section": "0.3 Module 02 – Probability",
    "text": "0.3 Module 02 – Probability\n\n\nOverview\n\n\nModule 2.1 – Basics of Probability\n\n\nModule 2.2 – Conditional Probability\n\n\n\n\nThis site provides interactive and static examples for economic data analysis using R and WebR. Click on the links above to explore each section.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>ECON 700</span>"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "2  About",
    "section": "",
    "text": "2.1 ECON 700\n# About ECON 700\nECON 700 introduces students to R for economic analysis. You will learn to:\n- Explore datasets\n- Create plots\n- Perform calculations\n- Use interactive WebR examples in the browser",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>About</span>"
    ]
  },
  {
    "objectID": "mod-1-0-overview.html",
    "href": "mod-1-0-overview.html",
    "title": "3  Module 1 Overview",
    "section": "",
    "text": "3.1 Module 1: Introduction to R and Data Analysis\nWelcome to Module 1 of ECON 700.\nIn this module, you will be introduced to R, the RStudio environment, and the basics of working with data in R.",
    "crumbs": [
      "Module 1: Introduction to R",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Module 1 Overview</span>"
    ]
  },
  {
    "objectID": "mod-1-0-overview.html#learning-objectives",
    "href": "mod-1-0-overview.html#learning-objectives",
    "title": "3  Module 1 Overview",
    "section": "3.2 Learning Objectives",
    "text": "3.2 Learning Objectives\nBy the end of this module, you should be able to:\n\nInstall and navigate R and RStudio.\n\nUnderstand R’s basic syntax and data types.\n\nWork with variables and simple operations in R.\n\nImport, view, and explore datasets.\n\nApply descriptive statistics for initial data exploration.",
    "crumbs": [
      "Module 1: Introduction to R",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Module 1 Overview</span>"
    ]
  },
  {
    "objectID": "mod-1-0-overview.html#readings-resources",
    "href": "mod-1-0-overview.html#readings-resources",
    "title": "3  Module 1 Overview",
    "section": "3.3 Readings & Resources",
    "text": "3.3 Readings & Resources\n\nWickham, H., & Grolemund, G. (2017). R for Data Science. (Chapters 1–3).\n\nOnline R documentation: https://cran.r-project.org/manuals.html\n\nRStudio Cheat Sheets",
    "crumbs": [
      "Module 1: Introduction to R",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Module 1 Overview</span>"
    ]
  },
  {
    "objectID": "mod-1-0-overview.html#activities",
    "href": "mod-1-0-overview.html#activities",
    "title": "3  Module 1 Overview",
    "section": "3.4 Activities",
    "text": "3.4 Activities\n\nComplete the hands-on coding exercises embedded in each lesson.\n\nUse WebR to experiment directly in your browser.\n\nParticipate in the discussion forum with your reflections on R’s strengths and challenges.",
    "crumbs": [
      "Module 1: Introduction to R",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Module 1 Overview</span>"
    ]
  },
  {
    "objectID": "mod-1-0-overview.html#lessons-in-this-module",
    "href": "mod-1-0-overview.html#lessons-in-this-module",
    "title": "3  Module 1 Overview",
    "section": "3.5 Lessons in this Module",
    "text": "3.5 Lessons in this Module\n\n1.0 – Introduction to Data\n\n1.1 – Introduction to R\n\n1.2 – Variables in R\n\n\nNext: Start with Lesson 1.0 – Introduction to Data.",
    "crumbs": [
      "Module 1: Introduction to R",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Module 1 Overview</span>"
    ]
  },
  {
    "objectID": "mod-1-1-intro-to-data.html",
    "href": "mod-1-1-intro-to-data.html",
    "title": "4  Economic Analysis",
    "section": "",
    "text": "4.1 Data and the Challenge of Economic Analysis\nWe are awash in data. The challenge is to find the right data at the appropriate time to investigate an empirical question of interest. In some cases, the data are well defined, consistently formatted, readily available, and structured to facilitate analysis. Then there are data that could help answer a question, but are not in an easily accessible format. But, before tackling these problems, we need to ask the simple question:\nWhat are data?\nThe Merriam-Webster dictionary defines data as: “…factual information (such as measurements or statistics) used a basis for reasoning, discussion, or calculation.” Broadly speaking, data can consist of measurements regarding the health of individuals, performance of firms, the income of regions, the inflation rate of a national economy, among other things. Data can also consist of statistics that describe the properties of an underlying set of measurements.\nThe Bureau of Labor Statistics (BLS) defines the civilian labor force as “The labor force includes all people age 16 and older who are classified as either employed and unemployed. Conceptually, the labor force level is the number of people who are either working or actively looking for work.”\nHow many people are the in the civilian labor force in the United States? How many in Virginia? Is the labor force larger today than it was at the same time last year? How does the growth in the labor force in Virginia compare to other states? All these questions require obtaining data and, for some, manipulating data to create statistics about the properties of the data.",
    "crumbs": [
      "Module 1: Introduction to R",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Economic Analysis</span>"
    ]
  },
  {
    "objectID": "mod-1-1-intro-to-data.html#headline-unemployment-rate",
    "href": "mod-1-1-intro-to-data.html#headline-unemployment-rate",
    "title": "4  Economic Analysis",
    "section": "4.2 Headline Unemployment Rate",
    "text": "4.2 Headline Unemployment Rate\nThe headline unemployment rate is an example of a measure that has different values across time. Collectively, these measures are data on the headline unemployment rate. This rate is equal to the ratio of the employed persons in the civilian labor force to the civilian labor force.\nIn the following figure, we plot the evolution of the unemployment rate over time.",
    "crumbs": [
      "Module 1: Introduction to R",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Economic Analysis</span>"
    ]
  },
  {
    "objectID": "mod-1-1-intro-to-data.html#unemployment-by-race",
    "href": "mod-1-1-intro-to-data.html#unemployment-by-race",
    "title": "4  Economic Analysis",
    "section": "4.3 Unemployment by Race",
    "text": "4.3 Unemployment by Race\nData can consist of measurements of a variable across groups of individuals and time. In the following figure, we present the headline unemployment rate by selected racial groups in the United States from February 2020 to July 2020. Unlike the national unemployment rate which encompasses all individuals in the civilian labor force, each group represents all individuals by race relative to the civilian labor force by race. We can observe how the responsiveness of the unemployment rate differed by race.",
    "crumbs": [
      "Module 1: Introduction to R",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Economic Analysis</span>"
    ]
  },
  {
    "objectID": "mod-1-1-intro-to-data.html#unemployment-rate-for-selected-states",
    "href": "mod-1-1-intro-to-data.html#unemployment-rate-for-selected-states",
    "title": "4  Economic Analysis",
    "section": "4.4 Unemployment Rate for Selected States",
    "text": "4.4 Unemployment Rate for Selected States\nIn the table below, we obtain data on unemployment rates for Virginia, Maryland, North Carolina, West Virginia, and the United States from or ‘FRED’.\nIn the table, each row corresponds to a geography (state or nation) while each column represents a variable for that geography. Note that only the last period available is represented in the table.\n\n\nUnemployment Rate for Selected Geographies\n\n\nFRED Symbol\nDate of Observation\nValue\nValue in Decimal Form\nGeography\n\n\n\n\nVAUR\n2025-08-01\n3.6\n0.036\nVirginia\n\n\nNCUR\n2025-08-01\n3.7\n0.037\nNorth Carollina\n\n\nWVUR\n2025-08-01\n3.8\n0.038\nWest Virginia\n\n\nMDUR\n2025-08-01\n3.6\n0.036\nMaryland\n\n\nUNRATE\n2025-08-01\n4.3\n0.043\nUnited States",
    "crumbs": [
      "Module 1: Introduction to R",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Economic Analysis</span>"
    ]
  },
  {
    "objectID": "mod-1-1-intro-to-data.html#measurement",
    "href": "mod-1-1-intro-to-data.html#measurement",
    "title": "4  Economic Analysis",
    "section": "4.5 Measurement",
    "text": "4.5 Measurement\nReferring to the unemployment rate, there are two rows with observations for the selected geographical areas. In other words, the are the states on which data are collected and presented in the table. There are six variables in the table: the symbol of the variable from FRED, the date of the observation, the value of the observation, the value of the observation in decimal form, and the geography name of the observation.\nThe table contains different scales of measurement. The variable contains information on time while the variable is measured on the . The nominal scale is used to identify the observational data, that is, the data in the table are organized by the geographical area of the observation. The data pertaining to the unemployment rate is in that the measurements contain numeric information.\nBroadly speaking, data can be classified as or . In the table, the variable containing the geographical names is categorical. We cannot mathematically manipulate the categorical data (subtracting 1 from Virginia does not produce a meaningful result). We could, however, create a new variable that contains numerical values to represent the categorical data, that is, the new quantitative variable would be a numerical representation of the categorical data.",
    "crumbs": [
      "Module 1: Introduction to R",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Economic Analysis</span>"
    ]
  },
  {
    "objectID": "mod-1-1-intro-to-data.html#cross-sectional-time-series-and-panel-data",
    "href": "mod-1-1-intro-to-data.html#cross-sectional-time-series-and-panel-data",
    "title": "4  Economic Analysis",
    "section": "4.6 Cross-Sectional, Time Series, and Panel Data",
    "text": "4.6 Cross-Sectional, Time Series, and Panel Data\nThere are three broad types of data. Let’s establish some terminology. When we discuss data, we often refer to and . In this context, individuals can represent people, firms, airlines, cars, or some other characteristic that defines the unique observations. For example, if we had data on the average fuel mileage of passenger vehicles in 2019, then individuals would refer to each type of passenger vehicle. If we had randomized data on 100,000 taxpayers in Virginia for 2018, then individuals would refer to unique taxpayers. Lastly, if we collected data on airplane arrivals at Dulles International Airport for each day in 2019, then we would have individual observations across time. We could organize this data by plane registration, airline, or country of origin, or some other category of interest.\n are data collected across individuals at the same point of time. There is no depth to cross-sectional data, that is, the data represent a snapshot at a specific point in time.\n are data collected over several time periods. Data for the headline unemployment graph for the United States are time series data.In this context, time series data refers to one variable across time. One can have a collection of time series variables (inflation rate, unemployment rate, and so on). Time series data has depth but not breadth.\n are data collected across individuals and time. If we collected data for the unemployment rate across states from 2010 to 2020, then we would have individuals (states) and time (months) as defining characteristics of our data. Panel data has breadth (across individuals) and depth (across time).",
    "crumbs": [
      "Module 1: Introduction to R",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Economic Analysis</span>"
    ]
  },
  {
    "objectID": "mod-1-1-intro-to-data.html#population-versus-sample-data",
    "href": "mod-1-1-intro-to-data.html#population-versus-sample-data",
    "title": "4  Economic Analysis",
    "section": "4.7 Population versus Sample Data",
    "text": "4.7 Population versus Sample Data\nWhen working with data, a question may arise whether it is appropriate to work with the population or a sample. The represents all the individuals for a particular study while a is a subset of the population. Let’s say we wanted to calculate the average age of students at Old Dominion University for the Fall 2020 semester. If we had access to student records, this might be a relatively easy exercise. In other words, if we had access to data for the population of students, we could calculate the average age of the student population.\nNow, let’s assume we wanted to calculate the average age for all college students in the United States. The problem has become more difficult. We could try and obtain all the records from all the colleges and universities in the United States but this effort might be and . We could instead sample different colleges and universities and construct an estimate of the average age of college students. The “closer” our sample is to the population, the better our estimate of the average age of all the college students in the United States. If we only selected colleges and universities with undergraduate programs, our sample would likely understate the average age of college students. If we only selected graduate programs at colleges and universities, our sample would likely overstate the average age of college students.\nThe process by which we use a sample to estimate the properties of the population is . Gathering a sample that is representative of the population is the first step. We then must understand the properties of the sample and how this reflects the properties of the population.",
    "crumbs": [
      "Module 1: Introduction to R",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Economic Analysis</span>"
    ]
  },
  {
    "objectID": "mod-1-2-intro-to-r.html",
    "href": "mod-1-2-intro-to-r.html",
    "title": "5  Introduction to R",
    "section": "",
    "text": "5.1 Why use R and RStudio?\nWe will use R and RStudio extensively in this class. You will also use these programs extensively in the following classes on the econometrics sequence.\nA frequently asked question is “why can’t we use Excel?”\nThe simple answer is that Excel is good for some things but R is better for the things we want to do in this and other classes.\nWriting code (programming) allows for:\nOther programs have lower fixed costs than R. These programs, whether Excel, SAS, SPSS, or TSP, have ‘built in’ functions and interfaces that allow ‘easier entry’ than R. In other words, you will invest less time to learn how to start working in other programs than R.\nSo, why then use R? First, coding is like learning a second language. It takes a while to learn the logic and ‘flow’ of the programming language. Second, unlike many other programs, you have a very good idea of what R is doing. If you write code, you learn where data come from, how they are formatted, the properties of data, and you gain a much deeper understanding of the process by which you arrive at an answer.\nAnother strength of this approach is that once you learn to code in R and use RStudio, your marginal cost of learning Python, C++, or SQL is lower because the logic behind each of these languages is similar.\nSimply put, coding is as much about the journey as the destination.",
    "crumbs": [
      "Module 1: Introduction to R",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Introduction to R</span>"
    ]
  },
  {
    "objectID": "mod-1-2-intro-to-r.html#why-use-r-and-rstudio",
    "href": "mod-1-2-intro-to-r.html#why-use-r-and-rstudio",
    "title": "5  Introduction to R",
    "section": "",
    "text": "Reproducibility (code provides transparency to processes)\nCustomization (many solutions to a problem)\nAutomation (code once, run many times)\nAccountability (the programmer is responsible for what the code does)",
    "crumbs": [
      "Module 1: Introduction to R",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Introduction to R</span>"
    ]
  },
  {
    "objectID": "mod-1-2-intro-to-r.html#r-and-rstudio-an-introduction",
    "href": "mod-1-2-intro-to-r.html#r-and-rstudio-an-introduction",
    "title": "5  Introduction to R",
    "section": "5.2 R and RStudio: An Introduction",
    "text": "5.2 R and RStudio: An Introduction\nYou will need to install R and RStudio.\nEach is a piece of software. R is the ‘engine’ and RStudio is the interface.\nYou can work with R directly, but RStudio makes the process less painful.\nR is the statistical software package that we will use throughout the course,\nRStudio is an interface that makes using R much easier.\nThe R Project is located at: https://www.r-project.org/",
    "crumbs": [
      "Module 1: Introduction to R",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Introduction to R</span>"
    ]
  },
  {
    "objectID": "mod-1-2-intro-to-r.html#downloading-r",
    "href": "mod-1-2-intro-to-r.html#downloading-r",
    "title": "5  Introduction to R",
    "section": "5.3 Downloading R",
    "text": "5.3 Downloading R\nYou can download R at: https://cloud.r-project.org/\nSelect the correct operating system to download and install R.",
    "crumbs": [
      "Module 1: Introduction to R",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Introduction to R</span>"
    ]
  },
  {
    "objectID": "mod-1-2-intro-to-r.html#downloading-rstudio",
    "href": "mod-1-2-intro-to-r.html#downloading-rstudio",
    "title": "5  Introduction to R",
    "section": "5.4 Downloading RStudio",
    "text": "5.4 Downloading RStudio\nYou can download RStudio at: https://posit.co/download/rstudio-desktop/\nNote how Posit tells you to install R and then RStudio.\nYou can also use Posit Cloud from Posit at: https://posit.cloud/",
    "crumbs": [
      "Module 1: Introduction to R",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Introduction to R</span>"
    ]
  },
  {
    "objectID": "mod-1-2-intro-to-r.html#tutorials-in-r",
    "href": "mod-1-2-intro-to-r.html#tutorials-in-r",
    "title": "5  Introduction to R",
    "section": "5.5 Tutorials in R",
    "text": "5.5 Tutorials in R\nThere are numerous tutorials online on how to use R.\nSome overviews that might be helpful:\nR Programming for Beginners: https://youtu.be/fDRa82lxzaU\nR Programming Tutorial: https://youtu.be/_V8eKsto3Ug",
    "crumbs": [
      "Module 1: Introduction to R",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Introduction to R</span>"
    ]
  },
  {
    "objectID": "mod-1-2-intro-to-r.html#how-to-get-better-at-coding",
    "href": "mod-1-2-intro-to-r.html#how-to-get-better-at-coding",
    "title": "5  Introduction to R",
    "section": "5.6 How to Get Better at Coding",
    "text": "5.6 How to Get Better at Coding\nNo coder works alone. Everyone (and yes, I mean everyone) relies on the expertise of others to code.\nWhat does this mean?\nWhen you are working on code, try it yourself first. If something doesn’t work, look for small typos.\nYou can then start asking other resources for help.\nArtificial Intelligence (AI) is helpful to debug code. It can even write code for you, if you know what you are doing.\nRemember, however, that AI is only as good as its algorithm and your prompt. It can (and will) give you answers that do not do what you expect them to do.\nCoding is a dance between what you know and what you can find. The more that you do on your own, the better you will be able to use AI to help you improve (not write) your code.",
    "crumbs": [
      "Module 1: Introduction to R",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Introduction to R</span>"
    ]
  },
  {
    "objectID": "mod-1-2-intro-to-r.html#opening-rstudio",
    "href": "mod-1-2-intro-to-r.html#opening-rstudio",
    "title": "5  Introduction to R",
    "section": "5.7 Opening RStudio",
    "text": "5.7 Opening RStudio\n\n\n\nScreenshot of RStudio in Windows\n\n\nWhen you open RStudio for the first time, you will see four panels like in the above image. It is likely that your version of RStudio has a white background with blue or black text.\nIf you would like to change this, go to “Tools &gt; Global Options… &gt; Appearance &gt; Editor theme”.\nYou can choose a darker theme, or leave it a lighter theme.\nThe four panels are as follows:\n\nTop Left: Source – This is where you will write the R code you want to save. In other words, this is where you write and save your work, usually called R scripts (.R files).\nBottom Left: Console – When you execute (or run) code, you will usually see output here. This is also a place you can write code you do not want to be part of your final script. If you were a painter, the Source panel would be your canvas and the Console would be your palette.\nTop Right: Environment – Here is where we will be able to see all the objects (data, etc.) that we are working with in the moment. To clear your environment, use the code rm(list = ls()).\nBottom Right: Output – This is mostly where you will see plots you have generated, but can also see files on your computer, packages you have installed, and “Help” for certain functions.\n\n\n\n\nScreenshot of Rstudio with panel labels.",
    "crumbs": [
      "Module 1: Introduction to R",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Introduction to R</span>"
    ]
  },
  {
    "objectID": "mod-1-3-intro-to-r-variables.html",
    "href": "mod-1-3-intro-to-r-variables.html",
    "title": "6  Variables in R",
    "section": "",
    "text": "6.1 Assigning Numeric Values to Variables\nWe can use the assignment operator in R to assign values to a variable. The assignment operator can be thought of as moving a value, character, date, or other form into a named variable.\nThe assignment operator is “&lt;-”.\nThe line, “x2 &lt;- 1056”, means assign the value 1056 to the variable x2.\nIn the code below, we assign the numerical value of 2 to the variable x1 and the numerical value of 4.5 to the variable x2.\nWe can assign the value contained in one variable in another. For example, we can assign x2 to x3 and also specify that the integer value of x2 is assigned to x3.",
    "crumbs": [
      "Module 1: Introduction to R",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Variables in R</span>"
    ]
  },
  {
    "objectID": "mod-1-3-intro-to-r-variables.html#why-use-r-and-rstudio",
    "href": "mod-1-3-intro-to-r-variables.html#why-use-r-and-rstudio",
    "title": "6  Variables in R",
    "section": "",
    "text": "Reproducibility (code provides transparency to processes)\nCustomization (many solutions to a problem)\nAutomation (code once, run many times)\nAccountability (the programmer is responsible for what the code does)",
    "crumbs": [
      "Module 1: Introduction to R",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Variables in R</span>"
    ]
  },
  {
    "objectID": "mod-1-3-intro-to-r-variables.html#r-and-rstudio-an-introduction",
    "href": "mod-1-3-intro-to-r-variables.html#r-and-rstudio-an-introduction",
    "title": "6  Variables in R",
    "section": "6.2 R and RStudio: An Introduction",
    "text": "6.2 R and RStudio: An Introduction\nYou will need to install R and RStudio.\nEach is a piece of software. R is the ‘engine’ and RStudio is the interface.\nYou can work with R directly, but RStudio makes the process less painful.\nR is the statistical software package that we will use throughout the course,\nRStudio is an interface that makes using R much easier.\nThe R Project is located at: https://www.r-project.org/",
    "crumbs": [
      "Module 1: Introduction to R",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Variables in R</span>"
    ]
  },
  {
    "objectID": "mod-1-3-intro-to-r-variables.html#downloading-r",
    "href": "mod-1-3-intro-to-r-variables.html#downloading-r",
    "title": "6  Variables in R",
    "section": "6.3 Downloading R",
    "text": "6.3 Downloading R\nYou can download R at: https://cloud.r-project.org/\nSelect the correct operating system to download and install R.",
    "crumbs": [
      "Module 1: Introduction to R",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Variables in R</span>"
    ]
  },
  {
    "objectID": "mod-1-3-intro-to-r-variables.html#downloading-rstudio",
    "href": "mod-1-3-intro-to-r-variables.html#downloading-rstudio",
    "title": "6  Variables in R",
    "section": "6.4 Downloading RStudio",
    "text": "6.4 Downloading RStudio\nYou can download RStudio at: https://posit.co/download/rstudio-desktop/\nNote how Posit tells you to install R and then RStudio.\nYou can also use Posit Cloud from Posit at: https://posit.cloud/",
    "crumbs": [
      "Module 1: Introduction to R",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Variables in R</span>"
    ]
  },
  {
    "objectID": "mod-1-3-intro-to-r-variables.html#tutorials-in-r",
    "href": "mod-1-3-intro-to-r-variables.html#tutorials-in-r",
    "title": "6  Variables in R",
    "section": "6.5 Tutorials in R",
    "text": "6.5 Tutorials in R\nThere are numerous tutorials online on how to use R.\nSome overviews that might be helpful:\nR Programming for Beginners: https://youtu.be/fDRa82lxzaU\nR Programming Tutorial: https://youtu.be/_V8eKsto3Ug",
    "crumbs": [
      "Module 1: Introduction to R",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Variables in R</span>"
    ]
  },
  {
    "objectID": "mod-1-3-intro-to-r-variables.html#opening-rstudio",
    "href": "mod-1-3-intro-to-r-variables.html#opening-rstudio",
    "title": "6  Variables in R",
    "section": "6.6 Opening RStudio",
    "text": "6.6 Opening RStudio\n\n\n\nScreenshot of RStudio in Windows\n\n\nWhen you open RStudio for the first time, you will see four panels like in the above image. It is likely that your version of RStudio has a white background with blue or black text.\nIf you would like to change this, go to “Tools &gt; Global Options… &gt; Appearance &gt; Editor theme”.\nYou can choose a darker theme, or leave it a lighter theme.\nThe four panels are as follows:\n\nTop Left: Source – This is where you will write the R code you want to save. In other words, this is where you write and save your work, usually called R scripts (.R files).\nBottom Left: Console – When you execute (or run) code, you will usually see output here. This is also a place you can write code you do not want to be part of your final script. If you were a painter, the Source panel would be your canvas and the Console would be your palette.\nTop Right: Enviornment – Here is where we will be able to see all the objects (data, etc.) that we are working with in the moment. To clear your environment, use the code rm(list = ls()).\nBottom Right: Output – This is mostly where you will see plots you have generated, but can also see files on your computer, packages you have installed, and “Help” for certain functions.\n\n\n\n\nScreenshot of Rstudio with panel labels.",
    "crumbs": [
      "Module 1: Introduction to R",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Variables in R</span>"
    ]
  },
  {
    "objectID": "mod-1-3-intro-to-r-variables.html#webr",
    "href": "mod-1-3-intro-to-r-variables.html#webr",
    "title": "6  Variables in R",
    "section": "7.1 WebR",
    "text": "7.1 WebR\nWe can use WebR to provide dynamic examples of code. The WebR code chunks appear different than the static code chucks.\nAs you can see below, you can run the WebR code in your browser. You can add, subtract, or change the code chunk entirely.\nThe WebR code chunk below mirrors the static code chunk above.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Module 1: Introduction to R",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Variables in R</span>"
    ]
  },
  {
    "objectID": "mod-1-3-intro-to-r-variables.html#assigning-numeric-values-to-variables",
    "href": "mod-1-3-intro-to-r-variables.html#assigning-numeric-values-to-variables",
    "title": "6  Variables in R",
    "section": "",
    "text": "Please enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Module 1: Introduction to R",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Variables in R</span>"
    ]
  },
  {
    "objectID": "mod-1-3-intro-to-r-variables.html#assigning-character-values-to-a-variable",
    "href": "mod-1-3-intro-to-r-variables.html#assigning-character-values-to-a-variable",
    "title": "6  Variables in R",
    "section": "6.2 Assigning Character Values to a Variable",
    "text": "6.2 Assigning Character Values to a Variable\nWe can assign character values to a variable. In the following code, we assign the name “Timothy” as a character to the variable .\nThere is a subtle but important difference to storing a value as a character or as a numeric variable.\nWe assign the or value 06250 to and 06250 as a or value to .\nNote what happens: when stored as a numeric value, 06250 is stored as 6250. When 06250 is stored as “06250” as a character variable, the character variable does not “lose” then “0” in the front of “06250”.\nThis can be very important if you are storing an identification value with a leading 0.\n\nrm(list = ls())\n\n#Load packages\n\nlibrary(dplyr)\nlibrary(lubridate)\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ forcats 1.0.0     ✔ stringr 1.5.1\n✔ purrr   1.1.0     ✔ tibble  3.3.0\n✔ readr   2.1.5     ✔ tidyr   1.3.1\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter()          masks stats::filter()\n✖ xts::first()             masks dplyr::first()\n✖ kableExtra::group_rows() masks dplyr::group_rows()\n✖ dplyr::lag()             masks stats::lag()\n✖ xts::last()              masks dplyr::last()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(kableExtra)\n\n#Assign the character Timothy to name_1\n\nname1 &lt;- as.character(\"Timothy\")\n\n#Assign the numeric value 06250 to x_4\n\nx4 &lt;- 06250\n\n#Assign 06250 as a character \n\nname2 &lt;- as.character(\"06250\")\n\n#Convert the character 06250 to numeric\n\nname3 &lt;- as.numeric(name2)\n\n# Output\n\nname1\n\n[1] \"Timothy\"\n\nx4\n\n[1] 6250\n\nname2\n\n[1] \"06250\"\n\nname3\n\n[1] 6250",
    "crumbs": [
      "Module 1: Introduction to R",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Variables in R</span>"
    ]
  },
  {
    "objectID": "mod-1-3-intro-to-r-variables.html#assigning-date-values-to-a-variable",
    "href": "mod-1-3-intro-to-r-variables.html#assigning-date-values-to-a-variable",
    "title": "6  Variables in R",
    "section": "6.3 Assigning Date Values to a Variable",
    "text": "6.3 Assigning Date Values to a Variable\nWe can also store dates and work with dates. We assign 2020-09-01 a date value using the package. Note that we tell the package that the format of the date is year-month-day (ymd).\nLikewise, we assign 09-05-2020 to date2 as a date variable but tell the package that the format of the date is now month-day-year (mdy). Note that even though the dates are in different formats, the package transforms the dates into a format recognizable by R.\nHaving transformed the date values, we can calculate the time difference by assigning to variable .\n\nrm(list = ls())\n\n#Load packages\n\nlibrary(dplyr)\nlibrary(lubridate)\nlibrary(tidyverse)\nlibrary(kableExtra)\n\n\n#Convert the text \"2020-09-01\" to a date variable\n\ndate1 &lt;- lubridate::ymd(\"2020-09-01\")\n\n#Convert \"2020-09-05\" to a date variable\n\ndate2 &lt;- lubridate::mdy(\"09-05-2020\")\n\n#Calculate the time difference between two variables\n\ndate3 &lt;- date2 - date1\n\n#Output the variables \n\ndate1\n\n[1] \"2020-09-01\"\n\ndate2\n\n[1] \"2020-09-05\"\n\ndate3\n\nTime difference of 4 days",
    "crumbs": [
      "Module 1: Introduction to R",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Variables in R</span>"
    ]
  },
  {
    "objectID": "mod-1-3-intro-to-r-variables.html#creating-vectors",
    "href": "mod-1-3-intro-to-r-variables.html#creating-vectors",
    "title": "6  Variables in R",
    "section": "7.1 Creating Vectors",
    "text": "7.1 Creating Vectors\nWe can now create a vector that contains several values. In the following example, we combine several numbers and assign them to the variable .\nWe can also combine other variables (if they are the same type) to form a new vector. You can combine single element variables with vectors to create a new vector .\n\nrm(list = ls())\n\n#Load packages\n\nlibrary(dplyr)\nlibrary(lubridate)\nlibrary(tidyverse)\nlibrary(kableExtra)\n\n# Assign values to x1, x2, x3, x4\n\nx1 &lt;- 1\nx2 &lt;- -5\nx3 &lt;- 136\nx4 &lt;- 0.47\nx5 &lt;- 4840\n\n#Create a row vector \n\nx5 &lt;- c(12, 13, 14, 25, 100)\n\n#Use existing variables to create a row vector\n\nx6 &lt;- c(x1, x2, x3, x4, x5)\n\n# Use Kable To Create Tables of X5 and X6\n\nkable(x5)\n\n\n\n\nx\n\n\n\n\n12\n\n\n13\n\n\n14\n\n\n25\n\n\n100\n\n\n\n\nkable(x6)\n\n\n\n\nx\n\n\n\n\n1.00\n\n\n-5.00\n\n\n136.00\n\n\n0.47\n\n\n12.00\n\n\n13.00\n\n\n14.00\n\n\n25.00\n\n\n100.00\n\n\n\n\n\nWhen we display , for example, we note is a row vector consisting of one row and 5 elements. We can also directly manipulate by multiplying it by two.\nWe should, however, understand that product of and 2 is not stored, it’s a direct manipulation and not available for future use. If we wanted to store it, we would have to assign it to a variable. Here, we assign the product of and 2 to the variable .\n\n#Output x5 * 2\n\nkable(x5)\n\n\n\n\nx\n\n\n\n\n12\n\n\n13\n\n\n14\n\n\n25\n\n\n100\n\n\n\n\nkable(x5*2)\n\n\n\n\nx\n\n\n\n\n24\n\n\n26\n\n\n28\n\n\n50\n\n\n200\n\n\n\n\n#Assign x5*2 to x7\n\nx7 &lt;- x5*2\n\nkable(x7)\n\n\n\n\nx\n\n\n\n\n24\n\n\n26\n\n\n28\n\n\n50\n\n\n200",
    "crumbs": [
      "Module 1: Introduction to R",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Variables in R</span>"
    ]
  },
  {
    "objectID": "mod-1-3-intro-to-r-variables.html#creating-a-data-frame",
    "href": "mod-1-3-intro-to-r-variables.html#creating-a-data-frame",
    "title": "6  Variables in R",
    "section": "7.2 Creating a Data Frame",
    "text": "7.2 Creating a Data Frame\nSo far, everything we have created has been stored as a variable or vector. A consists of rows and columns. The organization of the matrix is important. In some cases, the rows will correspond to individual observations with variables in the columns. In other cases, the variables are in the rows and individuals in columns. Matrices can contain quantitative and qualitative elements.\nA matrix is a table or a two-dimensional array-like structure. In R, a is a list of variables with the same number of rows with unique row names. It is represented by the class .\nA can have one column with numeric elements, another with date elements, another with character elements, and so on. The CDC data earlier in this module is an example of a data frame.\nFirst, let’s create two row vectors, and . We can these together using the row bind, , or column bind, , functions.\nThe function “stacks” the observations in the vectors. The function “adds” the column of the second vector to the first vector, creating a data frame with two columns.\nNow, let’s column bind and together as a data frame. We then row bind and together as another data frame\n is a data frame where the observations are in rows and the variables are in columns. is a data frame where the variables are in the rows and the observations are in the columns.\n\nrm(list = ls())\n\n#Load packages\n\nlibrary(dplyr)\nlibrary(lubridate)\nlibrary(tidyverse)\nlibrary(kableExtra)\n\n#create two vectors\n\nx8 &lt;- 3:6\nx9 &lt;- 10:13\n\nkable(rbind(x8,x9))\n\n\n\n\nx8\n3\n4\n5\n6\n\n\nx9\n10\n11\n12\n13\n\n\n\n\nkable(cbind(x8,x9))\n\n\n\n\nx8\nx9\n\n\n\n\n3\n10\n\n\n4\n11\n\n\n5\n12\n\n\n6\n13\n\n\n\n\n#Create Data Frames\n\ndf1 &lt;- data.frame(cbind(x8,x9))\n\ndf2 &lt;- data.frame(rbind(x8, x9))\n\nkable(df1)\n\n\n\n\nx8\nx9\n\n\n\n\n3\n10\n\n\n4\n11\n\n\n5\n12\n\n\n6\n13\n\n\n\n\nkable(df2)\n\n\n\n\n\nX1\nX2\nX3\nX4\n\n\n\n\nx8\n3\n4\n5\n6\n\n\nx9\n10\n11\n12\n13",
    "crumbs": [
      "Module 1: Introduction to R",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Variables in R</span>"
    ]
  },
  {
    "objectID": "mod-1-3-intro-to-r-variables.html#using-an-existing-dataframe",
    "href": "mod-1-3-intro-to-r-variables.html#using-an-existing-dataframe",
    "title": "6  Variables in R",
    "section": "7.3 Using an Existing Dataframe",
    "text": "7.3 Using an Existing Dataframe\nR comes with a number of “built in” data sets. For the following discussion, we use the data. The data contain observations on a number of cars from the Motor Trend magazine.\nOne can work directly with the data or assign the data to a data frame. In the following, we assign to the data frame. We use the assignment operator so that data flows from to .\nWe can now use the or functions to examine the structure of the data frame. Note that the function returns the first six rows while the function returns the last six rows.\n\nrm(list = ls())\n\n#Load packages\n\nlibrary(dplyr)\nlibrary(lubridate)\nlibrary(tidyverse)\nlibrary(kableExtra)\n\n#Assign mtcars to cardata \n\ncardata &lt;- mtcars\n\n# View structure of the data frame\n\nhead(cardata)\n\n                   mpg cyl disp  hp drat    wt  qsec vs am gear carb\nMazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\nValiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1\n\ntail(cardata)\n\n                mpg cyl  disp  hp drat    wt qsec vs am gear carb\nPorsche 914-2  26.0   4 120.3  91 4.43 2.140 16.7  0  1    5    2\nLotus Europa   30.4   4  95.1 113 3.77 1.513 16.9  1  1    5    2\nFord Pantera L 15.8   8 351.0 264 4.22 3.170 14.5  0  1    5    4\nFerrari Dino   19.7   6 145.0 175 3.62 2.770 15.5  0  1    5    6\nMaserati Bora  15.0   8 301.0 335 3.54 3.570 14.6  0  1    5    8\nVolvo 142E     21.4   4 121.0 109 4.11 2.780 18.6  1  1    4    2",
    "crumbs": [
      "Module 1: Introduction to R",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Variables in R</span>"
    ]
  },
  {
    "objectID": "mod-1-3-intro-to-r-variables.html#dimensions-of-a-data-frame",
    "href": "mod-1-3-intro-to-r-variables.html#dimensions-of-a-data-frame",
    "title": "6  Variables in R",
    "section": "7.4 Dimensions of a Data Frame",
    "text": "7.4 Dimensions of a Data Frame\nTo find the dimensions of a data frame, we can determine the number of rows and the number of columns separately or together. First, the and functions determine the number of rows and columns in a data frame, respectively.\nWe can also use the function to return the dimensions of the data frame. Note that the function returns rows then columns.\n\n# Number of rows\n\nnrow(cardata)\n\n[1] 32\n\n# Number of columns\n\nncol(cardata)\n\n[1] 11\n\n# Dimensions of data frame (rows and columns)\n\ndim(cardata)\n\n[1] 32 11",
    "crumbs": [
      "Module 1: Introduction to R",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Variables in R</span>"
    ]
  },
  {
    "objectID": "mod-1-3-intro-to-r-variables.html#selecting-rows-or-columns-in-a-data-frame",
    "href": "mod-1-3-intro-to-r-variables.html#selecting-rows-or-columns-in-a-data-frame",
    "title": "6  Variables in R",
    "section": "7.5 Selecting Rows or Columns in a Data Frame",
    "text": "7.5 Selecting Rows or Columns in a Data Frame\nHaving determined the dimensions of the data frame, we can now select parts of the data frame.\nWe can approach this by recognizing that a data frame is organized by rows and columns. For example, returns the value stored in the intersection of the first row and first column in the data frame. The first row in the data frame is for the Mazda RX4 and the first column in the data frame is for miles per gallon, so the intersection of these two produces a value of 21.0. In other words, the Maxda RX4 earns 21.0 miles per gallon.\nSo, in general, for a data frame, . For example, returns rows 1 to 2 and columns 2 to 3.\n\n# First observation, First variable.\n\ncardata[1,1]\n\n[1] 21\n\n# First two observations, 2nd and 3rd variables\n\ncardata[1:2, 2:3]\n\n              cyl disp\nMazda RX4       6  160\nMazda RX4 Wag   6  160\n\n\nIf the row or column is left blank, all values for the column are the result. For example, would return all rows for the first column of data. On the other hand, would return the first two rows and all the columns.\n\n# All rows, first two columns\n\ncardata[,1:2]\n\n                     mpg cyl\nMazda RX4           21.0   6\nMazda RX4 Wag       21.0   6\nDatsun 710          22.8   4\nHornet 4 Drive      21.4   6\nHornet Sportabout   18.7   8\nValiant             18.1   6\nDuster 360          14.3   8\nMerc 240D           24.4   4\nMerc 230            22.8   4\nMerc 280            19.2   6\nMerc 280C           17.8   6\nMerc 450SE          16.4   8\nMerc 450SL          17.3   8\nMerc 450SLC         15.2   8\nCadillac Fleetwood  10.4   8\nLincoln Continental 10.4   8\nChrysler Imperial   14.7   8\nFiat 128            32.4   4\nHonda Civic         30.4   4\nToyota Corolla      33.9   4\nToyota Corona       21.5   4\nDodge Challenger    15.5   8\nAMC Javelin         15.2   8\nCamaro Z28          13.3   8\nPontiac Firebird    19.2   8\nFiat X1-9           27.3   4\nPorsche 914-2       26.0   4\nLotus Europa        30.4   4\nFord Pantera L      15.8   8\nFerrari Dino        19.7   6\nMaserati Bora       15.0   8\nVolvo 142E          21.4   4\n\n# First two observations, All Columns\n\ncardata[1:2,]\n\n              mpg cyl disp  hp drat    wt  qsec vs am gear carb\nMazda RX4      21   6  160 110  3.9 2.620 16.46  0  1    4    4\nMazda RX4 Wag  21   6  160 110  3.9 2.875 17.02  0  1    4    4",
    "crumbs": [
      "Module 1: Introduction to R",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Variables in R</span>"
    ]
  },
  {
    "objectID": "mod-1-3-intro-to-r-variables.html#manipulating-the-dataframe-and-adding-new-variables",
    "href": "mod-1-3-intro-to-r-variables.html#manipulating-the-dataframe-and-adding-new-variables",
    "title": "6  Variables in R",
    "section": "7.6 Manipulating the Dataframe and Adding New Variables",
    "text": "7.6 Manipulating the Dataframe and Adding New Variables\nStarting with the data frame, we can now utilize one of the features of the packages to the data. Piping means that the data ‘flows’ in the direction of the pipe. It’s actually called a pipeline of data.\nA bit of housekeeping. We want to convert the rownames in to a variable. We pipe the data frame and then use the function to do just that. We then pipe the data to rename the new variable to .\nWe can now use the function to create a new variable or replace an existing variable.\nIn the following code, the data flow from to the next line of code to create a new variable using the function.\nImagine a temporary data frame that consists of with a new column for the variable.\nEach new line of within the function creates a new variable. The second variable that we create converts kilometers per gallon to kilometers per liter or .\nYour temporary data frame now consists of the data frame plus the two new variables.\nThe third line of the statement creates a new variable that converts miles per gallon into kilometers per liter, essentially duplicating the process of the first two lines of the mutate statement. The new variable is called .\nAt this point, you decide you only need to keep a subset of variables. We pipe the resulting data frame to the statement. The variables included in the select statement are kept in the temporary data frame while the variables excluded from the select statement are deleted from the temporary data frame.\nYou have now reached the end of the pipe. The “&lt;-” at the beginning then assigns all the data in the temporary data frame to the data frame. Because we have used the grammar of piping, the original data frame is unchanged.\nThe grammar of piping is very useful as it allows you to manipulate a data frame without changing the contents of the original data frame.\nNote how we can start using some of the additional features in the kable package to rename column names for improve presentation.\n\ncardata2 &lt;- cardata %&gt;%\n  rownames_to_column() %&gt;%\n  rename(car           = rowname) %&gt;%\n  mutate(km_per_gallon = mpg*1.60934,\n         km_per_liter  = km_per_gallon*3.78541,\n         km2_per_liter = mpg*1.60934*3.78541) %&gt;%\n  select(car, mpg, cyl, wt, km_per_gallon, km_per_liter, km2_per_liter)\n\nkable(cardata[1:5,])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmpg\ncyl\ndisp\nhp\ndrat\nwt\nqsec\nvs\nam\ngear\ncarb\n\n\n\n\nMazda RX4\n21.0\n6\n160\n110\n3.90\n2.620\n16.46\n0\n1\n4\n4\n\n\nMazda RX4 Wag\n21.0\n6\n160\n110\n3.90\n2.875\n17.02\n0\n1\n4\n4\n\n\nDatsun 710\n22.8\n4\n108\n93\n3.85\n2.320\n18.61\n1\n1\n4\n1\n\n\nHornet 4 Drive\n21.4\n6\n258\n110\n3.08\n3.215\n19.44\n1\n0\n3\n1\n\n\nHornet Sportabout\n18.7\n8\n360\n175\n3.15\n3.440\n17.02\n0\n0\n3\n2\n\n\n\n\nkable(cardata2[1:5,],\n      col.names = c(\"Car\",\n                    \"MPG\",\n                    \"Cylinders\",\n                    \"Weight\",\n                    \"Kilometers per Gallon\",\n                    \"Kliometers per Liter\",\n                    \"Squared KM/Gallon\")) %&gt;%\nkable_classic()\n\n\n\n\nCar\nMPG\nCylinders\nWeight\nKilometers per Gallon\nKliometers per Liter\nSquared KM/Gallon\n\n\n\n\nMazda RX4\n21.0\n6\n2.620\n33.79614\n127.9322\n127.9322\n\n\nMazda RX4 Wag\n21.0\n6\n2.875\n33.79614\n127.9322\n127.9322\n\n\nDatsun 710\n22.8\n4\n2.320\n36.69295\n138.8979\n138.8979\n\n\nHornet 4 Drive\n21.4\n6\n3.215\n34.43988\n130.3691\n130.3691\n\n\nHornet Sportabout\n18.7\n8\n3.440\n30.09466\n113.9206\n113.9206",
    "crumbs": [
      "Module 1: Introduction to R",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Variables in R</span>"
    ]
  },
  {
    "objectID": "mod-1-3-intro-to-r-variables.html#the-fred-api-for-real-gdp",
    "href": "mod-1-3-intro-to-r-variables.html#the-fred-api-for-real-gdp",
    "title": "6  Variables in R",
    "section": "8.1 4.1 The FRED API for Real GDP",
    "text": "8.1 4.1 The FRED API for Real GDP\nAn Application Programming Interface (API) allows us to obtain data from a source without having to manually downloading the data. In effect, an API allows us to “grab” data from an external source. If the external source updates the data, then our next API call with obtain the updated data.\nFor example, let’s say we wanted to obtain data from FRED on real Gross Domestic Product (GDP) for the United States from 1980 to the most current data available. We could go to FRED, search for real GDP, find the real GDP variable is called , and download the data into an Excel file. This process is labor-intensive and subject to error.\nFRED: \nReal GDP: \nWe can use an API call to obtain the data. Instead of having to write the code for an API call, we can use a package called .\nWe have the variable name and so we can simply use the function in to retrieve the real GDP series. Note that we rename the variable to and we convert the date using the package.\nWe can use the or to print out the contents of the first rows of the resulting data frame.\nWe see the data are organized such that each row corresponds to a time period, that is, the first row represents real GDP for the 1st quarter of 1950, the second row represents real GDP for the 2nd quarter of 1950, and so on.\n\nrm(list = ls())\n\n#Load packages\n\nlibrary(dplyr)\nlibrary(lubridate)\nlibrary(tidyverse)\nlibrary(kableExtra)\nlibrary(tidyquant)\n\n#Use tq_get to obtain real GDP from FRED\n\nrgdp &lt;- tq_get(\"GDPC1\",\n                    get  = \"economic.data\",\n                    from = \"1950-01-01\" ) %&gt;%\n        rename(rgdp = price) %&gt;%\n        mutate(date = lubridate::ymd(date))\n\nkable(rgdp[1:5,])\n\n\n\n\nsymbol\ndate\nrgdp\n\n\n\n\nGDPC1\n1950-01-01\n2346.104\n\n\nGDPC1\n1950-04-01\n2417.682\n\n\nGDPC1\n1950-07-01\n2511.127\n\n\nGDPC1\n1950-10-01\n2559.214\n\n\nGDPC1\n1951-01-01\n2593.967",
    "crumbs": [
      "Module 1: Introduction to R",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Variables in R</span>"
    ]
  },
  {
    "objectID": "mod-1-3-intro-to-r-variables.html#the-fred-api-for-nominal-gdp",
    "href": "mod-1-3-intro-to-r-variables.html#the-fred-api-for-nominal-gdp",
    "title": "6  Variables in R",
    "section": "8.2 The FRED API for Nominal GDP",
    "text": "8.2 The FRED API for Nominal GDP\nWe can also make an API call to FRED for the nominal GDP series. Much like the real GDP API call, we have a data frame with the variable containing the values for nominal GDP. We rename the variable to and also use the pacakge for the dates.\nNominal GDP: \n\nrm(list = ls())\n\n#Load packages\n\nlibrary(dplyr)\nlibrary(lubridate)\nlibrary(tidyverse)\nlibrary(kableExtra)\nlibrary(tidyquant)\n\n#Use tq_get to obtain nominal GDP from FRED\n\ngdp &lt;- tq_get(\"GDP\",\n                    get  = \"economic.data\",\n                    from = \"1950-01-01\" ) %&gt;%\n        rename(gdp = price) %&gt;%\n        mutate(date = lubridate::ymd(date))\n\nkable(gdp[1:5,])\n\n\n\n\nsymbol\ndate\ngdp\n\n\n\n\nGDP\n1950-01-01\n280.828\n\n\nGDP\n1950-04-01\n290.383\n\n\nGDP\n1950-07-01\n308.153\n\n\nGDP\n1950-10-01\n319.945\n\n\nGDP\n1951-01-01\n336.000",
    "crumbs": [
      "Module 1: Introduction to R",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Variables in R</span>"
    ]
  },
  {
    "objectID": "mod-1-3-intro-to-r-variables.html#the-fred-api-for-nominal-and-real-gdp",
    "href": "mod-1-3-intro-to-r-variables.html#the-fred-api-for-nominal-and-real-gdp",
    "title": "6  Variables in R",
    "section": "8.3 The FRED API for Nominal and Real GDP",
    "text": "8.3 The FRED API for Nominal and Real GDP\nIn the previous examples, we made an API call for one variable at a time. The result was two data frames, one for nominal GDP, and one for real GDP. It would be more efficient to make one API call that results in a single data frame with both variables.\nIn the following code, we the names of the two variables, that is, creates a row vector with the two names. This row vector is used by the function to make an API call to obtain the two variables from FRED.\nWhat’s important to note is that the data fame is in format. In other words, each row corresponds to one period of time for one variable.\nWe have to do some housecleaning. When we obtain the data from FRED, the variable names are contained in a variable called and the values are contained in a variable named . We rename those to and , respectively.\nWe then plot the data using the package. The function is very flexible and you can modify almost every element of a graph. For now, we provide the example and will work on developing our graphing skills later on in the course.\n\nrm(list = ls())\n\n#Load packages\n\nlibrary(dplyr)\nlibrary(kableExtra)\nlibrary(lubridate)\nlibrary(tidyquant)\nlibrary(tidyverse)\nlibrary(ggplot2)\n\n#Use tq_get to obtain nominal and real GDP from FRED\n\nall_gdp &lt;- tq_get(c(\"GDP\", \"GDPC1\"), \n                  get  = \"economic.data\",\n                    from = \"1950-01-01\") %&gt;%\n        mutate(date     = lubridate::ymd(date)) %&gt;%\n        rename(variable = symbol,\n               value    = price)\n\n# Produce Table of First 10 Observations\n\nkable(all_gdp[1:10,],\n      col.names = c(\"Variable\",\n                    \"Date\",\n                    \"Value\"))\n\n\n\nVariable\nDate\nValue\n\n\n\n\nGDP\n1950-01-01\n280.828\n\n\nGDP\n1950-04-01\n290.383\n\n\nGDP\n1950-07-01\n308.153\n\n\nGDP\n1950-10-01\n319.945\n\n\nGDP\n1951-01-01\n336.000\n\n\nGDP\n1951-04-01\n344.090\n\n\nGDP\n1951-07-01\n351.385\n\n\nGDP\n1951-10-01\n356.178\n\n\nGDP\n1952-01-01\n359.820\n\n\nGDP\n1952-04-01\n361.030\n\n\n\n#Use GGPLOT \n#GDP over time\n\nggplot(data = all_gdp, \n       aes(x = date, \n           y = value,\n           color = variable,\n           group = variable)) +\n  geom_line(linewidth = 1.5) +\n  theme_minimal() +\n  labs(title    = \"Real and Nominal GDP, United States\",\n       subtitle = \"Billions of Dollars\",\n       x        = \"Date\",\n       y        = \"Billions of Dollars\")",
    "crumbs": [
      "Module 1: Introduction to R",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Variables in R</span>"
    ]
  },
  {
    "objectID": "mod-1-3-intro-to-r-variables.html#using-the-census-api",
    "href": "mod-1-3-intro-to-r-variables.html#using-the-census-api",
    "title": "6  Variables in R",
    "section": "9.1 Using the Census API",
    "text": "9.1 Using the Census API\nIn the following code, we use the package to use the United States Census Bureau’s API for the American Community Survey to obtain data on county population for 2019.\nWe are using data from the American Community Survey 5-Year estimates which provide estimates for counties and county-equivalents in the United States.\nYou can learn more about the ACS at:\nurl{https://www.census.gov/programs-surveys/acs}\nTo set up the API, you will need to understand what variable names are used by the API developer.\nHere we rely on the ACS API documentation:\n\nWe can also use built in functions of the censusapi package.\nFirst, we can use to obtain a data frame with all the Census’ API.\nWe then can use for a specific API to determine what variables we can access and the names of these variables.\nYou will have to register for your own free Census API key.\nYou can do this at: \n\nrm(list = ls())\n\n#Load packages\n\nlibrary(censusapi)\n\nlibrary(dplyr)\nlibrary(kableExtra)\nlibrary(lubridate)\nlibrary(tidyquant)\nlibrary(tidyverse)\nlibrary(ggplot2)\n\n# List all the available Census APIs\n\napis &lt;- listCensusApis()\n\n# List all the variables in the ACS 5-Year API\n# Note that this takes a while, you should only run this when needed\n\nacs_vars &lt;- listCensusMetadata(name = \"2019/acs/acs5\", type = \"variables\")",
    "crumbs": [
      "Module 1: Introduction to R",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Variables in R</span>"
    ]
  },
  {
    "objectID": "mod-1-3-intro-to-r-variables.html#an-api-call-example",
    "href": "mod-1-3-intro-to-r-variables.html#an-api-call-example",
    "title": "6  Variables in R",
    "section": "9.2 An API Call Example",
    "text": "9.2 An API Call Example\nWe can now use the function in the package to obtain 2019 ACS data for total population. In doing so, we obtain data on the the universe of counties and county equivalents for the United States for 2019 with respect to total population.\nWe use the function to sort by state FIPS code (a geographical identification code) and then county FIPS code.\n\n#Note that B01001_001 = Total Population\n\ncounty_pop &lt;- getCensus(name = \"acs/acs5\", \n                              vintage = 2019,\n                              key = \"9c1637a56ff93f0af6b4b1d0547ea048fe668175\",\n                              vars = c(\"NAME\",\n                                       \"B01001_001E\"),\n                              region = \"county:*\")   %&gt;%\n  rename(total_pop   = B01001_001E,\n         county_fips = county, \n         state_fips  = state) %&gt;%\n  arrange(state_fips, county_fips)\n\nkable(county_pop[1:5,])\n\n\n\n\nstate_fips\ncounty_fips\nNAME\ntotal_pop\n\n\n\n\n01\n001\nAutauga County, Alabama\n55380\n\n\n01\n003\nBaldwin County, Alabama\n212830\n\n\n01\n005\nBarbour County, Alabama\n25361\n\n\n01\n007\nBibb County, Alabama\n22493\n\n\n01\n009\nBlount County, Alabama\n57681",
    "crumbs": [
      "Module 1: Introduction to R",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Variables in R</span>"
    ]
  },
  {
    "objectID": "mod-1-3-intro-to-r-variables.html#filtering-to-focus-on-one-state",
    "href": "mod-1-3-intro-to-r-variables.html#filtering-to-focus-on-one-state",
    "title": "6  Variables in R",
    "section": "9.3 Filtering to Focus On One State",
    "text": "9.3 Filtering to Focus On One State\nWe can then use the function to obtain a subset of the data. Here, we filter the data to only keep those observations for which the state FIPS code is 51, which happens to be the FIPS code for Virginia.\nWe use the existing data frame which we created using the previous code example.\n\nva_pop &lt;- county_pop %&gt;%\n  filter(state_fips == 51) %&gt;%\n  arrange(county_fips)\n\n\nkable(va_pop[1:10,])\n\n\n\n\nstate_fips\ncounty_fips\nNAME\ntotal_pop\n\n\n\n\n51\n001\nAccomack County, Virginia\n32673\n\n\n51\n003\nAlbemarle County, Virginia\n107405\n\n\n51\n005\nAlleghany County, Virginia\n15157\n\n\n51\n007\nAmelia County, Virginia\n12953\n\n\n51\n009\nAmherst County, Virginia\n31775\n\n\n51\n011\nAppomattox County, Virginia\n15707\n\n\n51\n013\nArlington County, Virginia\n233464\n\n\n51\n015\nAugusta County, Virginia\n75079\n\n\n51\n017\nBath County, Virginia\n4307\n\n\n51\n019\nBedford County, Virginia\n78376",
    "crumbs": [
      "Module 1: Introduction to R",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Variables in R</span>"
    ]
  },
  {
    "objectID": "mod-1-3-intro-to-r-variables.html#api-call-with-multiple-variables",
    "href": "mod-1-3-intro-to-r-variables.html#api-call-with-multiple-variables",
    "title": "6  Variables in R",
    "section": "9.4 API Call With Multiple Variables",
    "text": "9.4 API Call With Multiple Variables\nWe can also obtain multiple variables from one API call. In the last example, we obtain total population, male population, and female population from the 2019 ACS 5-Year estimates. We then calculate the sex ratio, which is equal to the male population divided by the female population and plot the sex ratio.\nWe note that there is one very large county in the data (Los Angeles, California). We also note there is another county where there are approximately 3.5 males to every woman (Forest County, Pennsylvania).\n\n# Obtain Population by Sex, Total Male Population, Total Female Population\n# B01001_001E - Population Total by Sex\n# B01001_002E - Total Male Population\n# B01001_026E - Total Female Population\n# Calculate sex-ratio = male population / female population\n\nsex_pop &lt;- getCensus(name = \"acs/acs5\", \n                              vintage = 2019,\n                              key = \"9c1637a56ff93f0af6b4b1d0547ea048fe668175\",\n                              vars = c(\"NAME\",\n                                       \"B01001_001E\",\n                                       \"B01001_002E\",\n                                       \"B01001_026E\"),\n                              region = \"county:*\")   %&gt;%\n  rename(total_pop   = B01001_001E,\n         male_pop    = B01001_002E,\n         female_pop  = B01001_026E,\n         county_fips = county, \n         state_fips  = state) %&gt;%\n  mutate(sex_ratio   = male_pop / female_pop) %&gt;%\n  arrange(state_fips, county_fips)\n\nggplot(data = sex_pop,\n       aes(x = total_pop, y = sex_ratio)) +\n  geom_point() + \n  labs(title = \"Sex Ratio for U.S Counties, 2019\",\n       x     = \"County Population\",\n       y     = \"Sex Ratio\")",
    "crumbs": [
      "Module 1: Introduction to R",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Variables in R</span>"
    ]
  },
  {
    "objectID": "mod-1-3-intro-to-r-variables.html#basic-operations",
    "href": "mod-1-3-intro-to-r-variables.html#basic-operations",
    "title": "6  Variables in R",
    "section": "9.5 Basic Operations",
    "text": "9.5 Basic Operations\nLet’s first try some basic math operations in R using webR.\nNotice that when you run the code that R produces the output.\nTry adding the following to the code and executing the code: \\((6 \\times 12)/24\\).\nWhat happens?\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Module 1: Introduction to R",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Variables in R</span>"
    ]
  },
  {
    "objectID": "mod-1-3-intro-to-r-variables.html#another-example",
    "href": "mod-1-3-intro-to-r-variables.html#another-example",
    "title": "6  Variables in R",
    "section": "9.6 Another example",
    "text": "9.6 Another example\nTry some of these with WebR:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Module 1: Introduction to R",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Variables in R</span>"
    ]
  }
]