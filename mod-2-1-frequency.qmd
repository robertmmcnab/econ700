---
title: "Frequency Distributions"
format:
  html:
    toc: true
    toc-depth: 3
    toc-location: right
    self-contained: false     # must be false when using webr
urlcolor: blue
filters:
  - webr
execute:
  webR: true
---

```{r setup, echo = FALSE, message = FALSE}

library(dplyr, quietly = TRUE)
library(ggplot2, quietly = TRUE)
library(kableExtra, quietly = TRUE)
library(tidyquant, quietly = TRUE)

```


## Frequency Distributions

The **frequency** of a category, class, or value is the number of times it occurs in a data set.

A **frequency distribution** is summary of data.

A frequency distribution is the pattern of frequencies of variable of interest.

Given several **non-overlapping** categories or classes, a frequency distribution contains the number of observations per class or category.

A frequency distribution, to be complete, must be:

-   **Mutually exclusive** - the classes or categories do not overlap.

-   **Collectively exhaustive** - all the observations are described by the distribution

A frequency distribution may provide insights about the data that cannot be quickly obtained by examining the data itself.

## Frequency Example

In the example below, we have six observations (students).

The students can be grouped by their graduating year. There are 3 students that graduate in 2028 and 4 students that graduate in 2029.

The number of students for each group is the frequency (count) associated with the group, that is,

-   Graduating Year 2028: 3

-   Graduating Year 2029: 4

| Student | Graduating Year | Grade Point Average |
|---------|-----------------|---------------------|
| 1       | 2028            | 3.0                 |
| 2       | 2028            | 2.8                 |
| 3       | 2028            | 3.5                 |
| 4       | 2029            | 2.7                 |
| 5       | 2029            | 2.8                 |
| 6       | 2029            | 3.0                 |
| 7       | 2029            | 3.6                 |

: Table of Observations

## Mtcars Frequency

For the following example, we use the **mtcars** data frame.

First, we **group** the data by the cylinder variable. The **group_by** function notifies R that the data are organized by a specific variable or variables.

Here, we notify R that the cylinder variable is how the data are grouped together, that is, R should consider all the observations with 4 cylinders one group, all the observations with 6 cylinders one group, and all the observations with 8 cylinders one group.

Second, we create a new variable **freq_cyl** using the **summarize** function. The variable **freq_cyl** is equal to the number of observations in each group.

We then use the **arrange** function to sort the resulting frequencies from lowest number to the highest number.

We create a frequency table using the **kable** function.

```{webr-r}

rm(list = ls())

data("mtcars")

cyl_freq <- mtcars %>%
  group_by(cyl) %>%
  summarize(freq_cyl = n()) %>%
  arrange(freq_cyl)

kable(cyl_freq,
      col.names = c("Cylinders", "Frequency"),
      align = c('c','c'),
      caption = 'Frequency Distribution of Cylinders') 
```

## Census Frequency

In the example below, we use the **censusapi** package to obtain data from the U.S. Census Bureau's *American Community Survey*.

We use the API to download data on counties and county-equivalent geographies for the United States. We specify two variables, the name of each geography and the population of each geography.

We rename the census population variable, **B01001_001E**, to **total_pop**.

We want to create categories for different ranges of population. To do this, we use the **case_when** function.

Having created the population categories, we **group_by** the population category variable and then use the **summarize** function to obtain a count of the number of observations in each category.

```{r, message = FALSE}

# Clear Memory 
rm(list = ls())

# Load Libraries

library(censusapi)
library(dplyr)
library(kableExtra)
library(tidyverse)

#B01001_001E is total population
#Case When to Create Categories

county_pop <- getCensus(name = "acs/acs5",
            vintage = 2023,
            key = "9c1637a56ff93f0af6b4b1d0547ea048fe668175",
            vars = c("NAME",
                     "B01001_001E"),
            region = "county:*") %>%
rename(total_pop = B01001_001E) %>%
mutate(pop_cat = case_when(total_pop > 99999 ~ "Greater than 99,999",
                           total_pop > 49999 ~ "50,000 - 99,999",
                           total_pop > 24999 ~ "25,000 - 49,999",
                           total_pop > 9999  ~ "10,000 - 24,999",
                           TRUE ~ "0 - 9,999"))

# Summarize to Create Frequencies by Categories

county_freq <- county_pop %>%
  group_by(pop_cat) %>%
  summarize(freq_pop = n()) %>%
  arrange(pop_cat)

# Use frequency data frame to produce table

kable(county_freq,
      col.names = c("Category", "Frequency"),
      align = c('c','c'),
      caption = 'Frequency of County Population, 2023') %>%
kable_styling(font_size = 14)



```

## Frequency Distributions

We can graphically depict the frequency distribution.

We use the **ggplot** package to create a graphical plot of the frequency distribution.

To learn more about the capabilities of **ggplot**, see <https://ggplot2.tidyverse.org/>.

We have categories (population size) on the x-axis and the frequencies on the y-axis.

We use the **geom_col** command to create a column chart of the frequencies. We choose to fill the columns with the *darkblue* color.

The **labs** command specifies the labels for the plot, to include the x-axis, y-axis, title, and subtitle.

```{webr-r}

rm(list = ls())

data("mtcars")

cyl_freq <- mtcars %>%
  group_by(cyl) %>%
  summarize(freq_cyl = n()) %>%
  arrange(freq_cyl)

ggplot(data = cyl_freq,
       aes(x    = cyl,
           y    = freq_cyl)) +
geom_col(fill = 'darkblue') +
labs(title    = 'Frequency Distribution for Cylinders',
     subtitle = 'MTCARS data',
     y        = 'Frequency',
     x        = 'Number of Cylinders')
```

## Relative Frequency Distributions

The frequency distribution may not be as informative as we would like if the number of observations is sufficiently large.

In the frequency distribution for the population of U.S. counties, there were more than 600 counties with populations between 10,000 and 24,999 individuals. How does this compare with the number of counties with populations less than 10,000?

A **relative frequency** distribution contains information on the **proportion** of observations in each class relative to the total number of observations.

Let $n$ be the total number of observations.

Let $i$ represent the number of classes or categories.

Let $n_i$ be the total number of observations in the *i-th* class.

$$\text{Relative Frequency of Class}_i = \frac{n_i}{n}$$

## Relative Frequency: Mtcars

We use the **mtcars** example data.

We **group** the data by the cylinder variable.

We estimate the frequency by cylinder.

We estimate the relative frequency using the **mutate** function.

We create a frequency table using the **kable** function.

```{webr-r}

rm(list = ls())

data("mtcars")

cyl_freq <- mtcars %>%
  group_by(cyl) %>%
  summarize(freq_cyl = n()) %>%
  mutate(rel_freq = freq_cyl/sum(freq_cyl)) %>%
  arrange(rel_freq)

kable(cyl_freq,
      col.names = c("Cylinders", "Frequency", 
                    "Relative Frequency"),
      align     = c('c','c','c'),
      digits    = 2,
      caption   = 'Frequency Distribution') 
```

## Relative Frequency: Census

We can also graphically depict the frequency distribution.

We return to our previous example using data from the U.S. Census Bureau. We obtain data on population for counties and county-equivalent geographies in the United States.

We use **case_when** to create a categorical variable that groups geographies into population **bins**.

As before, we use **summarize** to count the number of observations in each bin.

We then estimate the **relative frequency** by diving the number of observations in each bin by the total number of observations or

$$\text{Relative Frequency of Population Bin}_i = \frac{\text{Observations in Bin}_i}{\text{Total Observations}}$$

In other words, the relative frequency of the 0 to 9,999 population bin is equal to the number of counties in that bin divided by the total number of counties across all bins.

We then **ggplot** to create a graphical plot of the frequency distribution.

We have categories (population size) on the x-axis and the frequencies on the y-axis.

```{r, message = FALSE, warning=FALSE}

rm(list = ls())

library(censusapi)
library(dplyr)
library(kableExtra)
library(tidyverse)

#B01001_001E is total population
#Case When to Create Categories

county_pop <- getCensus(name = "acs/acs5",
            vintage = 2023,
            key = "9c1637a56ff93f0af6b4b1d0547ea048fe668175",
            vars = c("NAME",
                     "B01001_001E"),
            region = "county:*") %>%
rename(total_pop = B01001_001E) %>%
mutate(pop_cat = case_when(total_pop > 99999 ~ "Greater than 99,999",
                           total_pop > 49999 ~ "50,000 - 99,999",
                           total_pop > 24999 ~ "25,000 - 49,999",
                           total_pop > 9999  ~ "10,000 - 24,999",
                           TRUE ~ "0 - 9,999"))

county_freq <- county_pop %>%
  group_by(pop_cat) %>%
  summarize(freq_pop = n()) %>%
  mutate(rel_freq = freq_pop/sum(freq_pop)) %>%
  arrange(pop_cat)

ggplot(data = county_freq,
       aes(x = pop_cat,
           y = rel_freq,
           fill = rel_freq)) +
geom_col() +
theme_minimal() +
theme(legend.position="none") +
labs(title = "Relative Frequency of Population Bins",
     x     = "Population Bin",
     y     = "Relative Frequency")
```
## Scatterplots

A **scatterplot** is a graphical display of a relationship between two variables of interest. 

Before constructing a scatterplot, one must think about the nature of the relationship between the two variables.

The **independent** variable is typically represented on the horizontal axis while the **dependent** variable is typically represented on the vertical axis.

The hypothesized relationship between the $x$ and $y$ variables can be expressed as:

$$y = f(x)$$

Care must be taken to avoid interpreting the visual relationship.

In other words, what if the true relationship is:

$$y = f(x, w, z)$$

If you plot $y$ and $x$ and interpret the visual relationship, you are ignoring the potential relationships between $y$ and $w$ and $y$ and $z$.

Scatterplots may inform, but we should always be careful with any conclusions we derive from merely observing the pattern of two variables.

In the code below, we plot **weight in pounds** on the x-axis and **miles per gallon** on the y-axis. It would seem that there is a negative relationship between the weight of cars and their fuel efficiency. Heavier cars appear to have lower fuel efficiency.

```{webr-r}

rm(list = ls())

# Use GGPLOT
# x-axis -> weight
# y-axis -> mpg
# geom_point -> scatterplot
# theme_economic -> presentation

ggplot(data = mtcars,
       aes(x = wt*1000,
           y = mpg)) +
geom_point()+
theme_minimal() +
labs(x = "Weight in Pounds",
     y = "Miles per Gallon",
     title = 'Scatterplot of Car Weight and Miles per Gallon',
     subtitle = 'MTCARS Data')
```
